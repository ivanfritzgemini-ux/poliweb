{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-x-hidden\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className, \"word-break: break-word;\")}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,2KAAgB,MAG5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAM,KAAK;QAAK,WAAW,IAAA,4HAAE,EAAC,mBAAmB;QAAa,GAAG,KAAK;;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,2KAAgB,OAG/B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,+EACA;QAED,GAAG,KAAK;;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,2KAAgB,QAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,oGACA;QAED,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,2KAAgB,QAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,kDAAkD,WAAW;QAC1E,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,2KAAgB,QAGnC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,6KAAoB;AAEnC,MAAM,gBAAgB,gLAAuB;AAE7C,MAAM,eAAe,+KAAsB;AAE3C,MAAM,cAAc,8KAAqB;AAEzC,MAAM,8BAAgB,2KAAgB,CAGpC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,gLAAuB;QACtB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,2KAAgB,OAGpC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,gLAAuB;gBACtB,KAAK;gBACL,WAAW,IAAA,4HAAE,EACX,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,8KAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,oMAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe;QAAC,EACpB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe;QAAC,EACpB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,8KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,qDACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG,8KAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,2KAAgB,OAGxC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,kBAAkB,WAAW,GAAG,oLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,IAAA,0KAAG,EACvB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,KAA4C;QAA5C,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB,GAA5C;IACb,qBACE,6LAAC;QAAI,WAAW,IAAA,4HAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,0KAAG,EACvB;AAGF,MAAM,sBAAQ,2KAAgB,MAI5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,4KAAmB;QAClB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;;AAGb,MAAM,WAAW,GAAG,4KAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 670, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,6KAAoB;AAEnC,MAAM,cAAc,8KAAqB;AAEzC,MAAM,cAAc,8KAAqB;AAEzC,MAAM,8BAAgB,2KAAgB,MAGpC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC,gLAAuB;QACtB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,mTACA;QAED,GAAG,KAAK;;YAER;0BACD,6LAAC,6KAAoB;gBAAC,OAAO;0BAC3B,cAAA,6LAAC,sOAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;;;AAI7B,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,qCAAuB,2KAAgB,CAG3C,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,uLAA8B;QAC7B,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,gOAAS;YAAC,WAAU;;;;;;;;;;;;MAZnB;AAeN,qBAAqB,WAAW,GAAG,uLAA8B,CAAC,WAAW;AAE7E,MAAM,uCAAyB,2KAAgB,CAG7C,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,yLAAgC;QAC/B,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,sOAAW;YAAC,WAAU;;;;;;;;;;;;MAZrB;AAeN,uBAAuB,WAAW,GAChC,yLAAgC,CAAC,WAAW;AAE9C,MAAM,8BAAgB,2KAAgB,OAGpC,QAAyD;QAAxD,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,QAAQ,EAAE,GAAG,OAAO;yBACvD,6LAAC,+KAAsB;kBACrB,cAAA,6LAAC,gLAAuB;YACtB,KAAK;YACL,WAAW,IAAA,4HAAE,EACX,ucACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;;8BAET,6LAAC;;;;;8BACD,6LAAC,iLAAwB;oBACvB,WAAW,IAAA,4HAAE,EACX,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,6LAAC;;;;;;;;;;;;;;;;;;AAIP,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,8KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,0CAA0C;QACvD,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG,8KAAqB,CAAC,WAAW;AAE3D,MAAM,2BAAa,2KAAgB,OAGjC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC,6KAAoB;QACnB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,6NACA;QAED,GAAG,KAAK;;0BAET,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC,sLAA6B;8BAC5B,cAAA,6LAAC,gNAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAIrB,6LAAC,iLAAwB;0BAAE;;;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAoB,CAAC,WAAW;AAEzD,MAAM,gCAAkB,2KAAgB,QAGtC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,kLAAyB;QACxB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,4BAA4B;QACzC,GAAG,KAAK;;;;;;;;AAGb,gBAAgB,WAAW,GAAG,kLAAyB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 914, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ staff: Staff[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { staff: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudentByRut(rut: string): Promise<any | null> {\n  const { data: user, error: userError } = await supabase\n    .from('usuarios')\n    .select('id')\n    .eq('rut', rut)\n    .single();\n\n  if (userError && userError.code !== 'PGRST116') {\n    console.error('Error fetching user by RUT:', userError);\n    throw new Error('No se pudo buscar el usuario por RUT.');\n  }\n\n  if (!user) {\n    return null; // User does not exist\n  }\n\n  const { data: student, error: studentError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro')\n    .eq('id', user.id)\n    .single();\n\n  if (studentError && studentError.code !== 'PGRST116') {\n    console.error('Error fetching student details:', studentError);\n    throw new Error('No se pudo buscar los detalles del estudiante.');\n  }\n\n  return student;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAwDsB,WAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 929, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/AddStaffForm.tsx"],"sourcesContent":["'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport type { Staff } from '@/lib/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { useEffect, useState } from 'react';\nimport { getSexos, getRoles, addStaff } from '@/lib/actions';\nimport { Loader2 } from 'lucide-react';\nimport { cn, validateChileanRut } from '@/lib/utils';\n\nconst formSchema = z.object({\n  rut: z.string().refine(validateChileanRut, { message: 'RUT inválido.' }),\n  nombres: z.string().min(2, 'Los nombres deben tener al menos 2 caracteres.'),\n  apellidos: z.string().min(2, 'Los apellidos deben tener al menos 2 caracteres.'),\n  sexo_id: z.string({ required_error: 'Debe seleccionar un sexo.' }),\n  password: z.string().min(6, 'La contraseña debe tener al menos 6 caracteres.'),\n  email: z.string().email('Email inválido.'),\n  rol_id: z.string({ required_error: 'Debe seleccionar un rol.' }),\n  fecha_nacimiento: z.string({ required_error: 'Debe seleccionar una fecha de nacimiento.' }).refine((dateString) => {\n    const date = new Date(dateString);\n    const currentYear = new Date().getFullYear();\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1; // Month is 0-indexed\n    const day = date.getDate();\n\n    if (isNaN(date.getTime())) {\n      return false; // Invalid date format\n    }\n    if (year < 1900 || year > currentYear) {\n      return false; // Year out of range\n    }\n    if (month < 1 || month > 12) {\n      return false; // Month out of range\n    }\n    if (day < 1 || day > 31) {\n      return false; // Day out of range (basic check)\n    }\n    // Check for valid day for the given month and year (e.g., no Feb 30)\n    const lastDayOfMonth = new Date(year, month, 0).getDate();\n    if (day > lastDayOfMonth) {\n      return false;\n    }\n    return true;\n  }, {\n    message: 'La fecha de nacimiento no es válida. Asegúrese de que el formato sea DD/MM/YYYY y el año esté entre 1900 y el actual.',\n  }),\n  telefono: z.string().optional(),\n  direccion: z.string().optional(),\n});\n\ntype AddStaffFormProps = {\n  sexos: { id: string; nombre: string }[];\n  roles: { id: string; nombre_rol: string }[];\n  onStaffAdded: (staff: Staff) => void;\n};\n\nexport function AddStaffForm({ onStaffAdded, sexos, roles }: AddStaffFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      rut: '',\n      nombres: '',\n      apellidos: '',\n      sexo_id: '',\n      password: '',\n      email: '',\n      rol_id: '',\n      telefono: '',\n      direccion: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsSubmitting(true);\n    try {\n      const fechaNacimientoDate = new Date(values.fecha_nacimiento); // Parse YYYY-MM-DD string to Date object\n\n      const staffData = {\n        rut: values.rut,\n        nombres: values.nombres,\n        apellidos: values.apellidos,\n        sexo_id: values.sexo_id,\n        email: values.email,\n        rol_id: values.rol_id,\n        fecha_nacimiento: fechaNacimientoDate.toISOString(), // Convert Date to ISO string\n        telefono: values.telefono || null,\n        direccion: values.direccion || null,\n      };\n\n      const newStaffMember = await addStaff({ ...staffData, password: values.password });\n\n      onStaffAdded(newStaffMember as Staff);\n      toast({\n        title: 'Personal Añadido',\n        description: `${values.nombres} ${values.apellidos} ha sido añadido al sistema.`,\n      });\n      form.reset();\n    } catch (error: any) {\n      toast({\n        title: 'Error al añadir personal',\n        description: error.message || 'Ocurrió un error desconocido.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"grid grid-cols-2 gap-x-8 gap-y-4 pt-4\">\n        <FormField\n          control={form.control}\n          name=\"rut\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">RUT*</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: 12.345.678-9\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"nombres\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Nombres*</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Ricardo\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"apellidos\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Apellidos*</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Pérez Díaz\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"sexo_id\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Sexo*</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccione el sexo\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {sexos.map((sexo) => (\n                    <SelectItem key={sexo.id} value={sexo.id}>\n                      {sexo.nombre}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Email*</FormLabel>\n              <FormControl>\n                <Input placeholder=\"ejemplo@acad.link\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Contraseña*</FormLabel>\n              <FormControl>\n                <Input type=\"password\" placeholder=\"********\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"rol_id\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Rol*</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccione un rol\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {roles.map((role) => (\n                    <SelectItem key={role.id} value={role.id}>\n                      {role.nombre_rol}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"fecha_nacimiento\"\n          render={({ field }) => (\n            <FormItem className=\"col-span-2\">\n              <FormLabel className=\"text-xs sm:text-sm\">Fecha de Nacimiento*</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  {...field}\n                  value={field.value ? field.value.split('T')[0] : ''}\n                />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"telefono\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Teléfono</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: +56912345678\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"direccion\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Dirección</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Calle Falsa 123\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <div className=\"col-span-2 flex justify-end pt-2\">\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Añadir\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1662, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ staff: Staff[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { staff: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudentByRut(rut: string): Promise<any | null> {\n  const { data: user, error: userError } = await supabase\n    .from('usuarios')\n    .select('id')\n    .eq('rut', rut)\n    .single();\n\n  if (userError && userError.code !== 'PGRST116') {\n    console.error('Error fetching user by RUT:', userError);\n    throw new Error('No se pudo buscar el usuario por RUT.');\n  }\n\n  if (!user) {\n    return null; // User does not exist\n  }\n\n  const { data: student, error: studentError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro')\n    .eq('id', user.id)\n    .single();\n\n  if (studentError && studentError.code !== 'PGRST116') {\n    console.error('Error fetching student details:', studentError);\n    throw new Error('No se pudo buscar los detalles del estudiante.');\n  }\n\n  return student;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IA0FsB,cAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1677, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/EditStaffForm.tsx"],"sourcesContent":["'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport type { Staff } from '@/lib/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { useState } from 'react';\nimport { updateStaff } from '@/lib/actions';\nimport { validateChileanRut } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  rut: z.string().refine(validateChileanRut, { message: 'RUT inválido.' }),\n  nombres: z.string().min(2, 'Los nombres deben tener al menos 2 caracteres.'),\n  apellidos: z.string().min(2, 'Los apellidos deben tener al menos 2 caracteres.'),\n  sexo_id: z.string({ required_error: 'Debe seleccionar un sexo.' }),\n  email: z.string().email('Email inválido.'),\n  rol_id: z.string({ required_error: 'Debe seleccionar un rol.' }),\n  fecha_nacimiento: z.string({ required_error: 'Debe seleccionar una fecha de nacimiento.' }).refine((dateString) => {\n    const date = new Date(dateString);\n    return !isNaN(date.getTime());\n  }, {\n    message: 'La fecha de nacimiento no es válida.',\n  }),\n  telefono: z.string().optional(),\n  direccion: z.string().optional(),\n});\n\ntype EditStaffFormProps = {\n  staff: Staff;\n  onStaffUpdated: (staff: Staff) => void;\n  sexos: { id: string; nombre: string }[];\n  roles: { id: string; nombre_rol: string }[];\n};\n\nexport function EditStaffForm({ staff, onStaffUpdated, sexos, roles }: EditStaffFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      rut: staff.rut,\n      nombres: staff.nombres,\n      apellidos: staff.apellidos,\n      sexo_id: staff.sexo?.id || '',\n      email: staff.email,\n      rol_id: staff.role?.id || '',\n      fecha_nacimiento: staff.fecha_nacimiento ? staff.fecha_nacimiento.substring(0, 10) : '',\n      telefono: staff.telefono || '',\n      direccion: staff.direccion || '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsSubmitting(true);\n    try {\n      const fechaNacimientoDate = new Date(values.fecha_nacimiento);\n\n      const updates = {\n        nombres: values.nombres,\n        apellidos: values.apellidos,\n        sexo_id: values.sexo_id,\n        rol_id: values.rol_id,\n        fecha_nacimiento: fechaNacimientoDate.toISOString(),\n        telefono: values.telefono || null,\n        direccion: values.direccion || null,\n      };\n\n      await updateStaff(staff.rut, updates, staff.id);\n\n      const updatedStaffMember: Staff = {\n        ...staff,\n        ...updates,\n        sexo: sexos.find(s => s.id === values.sexo_id) || null,\n        role: roles.find(r => r.id === values.rol_id) || null,\n      };\n\n      onStaffUpdated(updatedStaffMember);\n      toast({\n        title: 'Personal Actualizado',\n        description: `${values.nombres} ${values.apellidos} ha sido actualizado.`,\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Error al actualizar personal',\n        description: error.message || 'Ocurrió un error desconocido.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"grid grid-cols-2 gap-x-8 gap-y-4 pt-4\">\n        <FormField\n          control={form.control}\n          name=\"rut\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">RUT</FormLabel>\n              <FormControl>\n                <Input {...field} disabled />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Email</FormLabel>\n              <FormControl>\n                <Input {...field} disabled />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"nombres\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Nombres*</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Ricardo\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"apellidos\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Apellidos*</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Pérez Díaz\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"sexo_id\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Sexo*</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccione el sexo\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {sexos.map((sexo) => (\n                    <SelectItem key={sexo.id} value={sexo.id}>\n                      {sexo.nombre}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"rol_id\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Rol*</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccione un rol\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {roles.map((role) => (\n                    <SelectItem key={role.id} value={role.id}>\n                      {role.nombre_rol}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"fecha_nacimiento\"\n          render={({ field }) => (\n            <FormItem className=\"col-span-2\">\n              <FormLabel className=\"text-xs sm:text-sm\">Fecha de Nacimiento*</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  {...field}\n                  value={field.value ? field.value.substring(0, 10) : ''}\n                />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"telefono\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Teléfono</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: +56912345678\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"direccion\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Dirección</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Calle Falsa 123\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <div className=\"col-span-2 flex justify-end pt-2\">\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Actualizar\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AAQA;AACA;AAQA;AACA;AACA;AACA;AACA;;;AA3BA;;;;;;;;;;;;;AA6BA,MAAM,aAAa,4IAAC,CAAC,MAAM,CAAC;IAC1B,KAAK,4IAAC,CAAC,MAAM,GAAG,MAAM,CAAC,4IAAkB,EAAE;QAAE,SAAS;IAAgB;IACtE,SAAS,4IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC3B,WAAW,4IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,SAAS,4IAAC,CAAC,MAAM,CAAC;QAAE,gBAAgB;IAA4B;IAChE,OAAO,4IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,QAAQ,4IAAC,CAAC,MAAM,CAAC;QAAE,gBAAgB;IAA2B;IAC9D,kBAAkB,4IAAC,CAAC,MAAM,CAAC;QAAE,gBAAgB;IAA4C,GAAG,MAAM,CAAC,CAAC;QAClG,MAAM,OAAO,IAAI,KAAK;QACtB,OAAO,CAAC,MAAM,KAAK,OAAO;IAC5B,GAAG;QACD,SAAS;IACX;IACA,UAAU,4IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,WAAW,4IAAC,CAAC,MAAM,GAAG,QAAQ;AAChC;AASO,SAAS,cAAc,KAA2D;QAA3D,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,EAAsB,GAA3D;QAUf,aAED;;IAXZ,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,2IAAQ;IAC1B,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAC;IAEjD,MAAM,OAAO,IAAA,4KAAO,EAA6B;QAC/C,UAAU,IAAA,gLAAW,EAAC;QACtB,eAAe;YACb,KAAK,MAAM,GAAG;YACd,SAAS,MAAM,OAAO;YACtB,WAAW,MAAM,SAAS;YAC1B,SAAS,EAAA,cAAA,MAAM,IAAI,cAAV,kCAAA,YAAY,EAAE,KAAI;YAC3B,OAAO,MAAM,KAAK;YAClB,QAAQ,EAAA,cAAA,MAAM,IAAI,cAAV,kCAAA,YAAY,EAAE,KAAI;YAC1B,kBAAkB,MAAM,gBAAgB,GAAG,MAAM,gBAAgB,CAAC,SAAS,CAAC,GAAG,MAAM;YACrF,UAAU,MAAM,QAAQ,IAAI;YAC5B,WAAW,MAAM,SAAS,IAAI;QAChC;IACF;IAEA,eAAe,SAAS,MAAkC;QACxD,gBAAgB;QAChB,IAAI;YACF,MAAM,sBAAsB,IAAI,KAAK,OAAO,gBAAgB;YAE5D,MAAM,UAAU;gBACd,SAAS,OAAO,OAAO;gBACvB,WAAW,OAAO,SAAS;gBAC3B,SAAS,OAAO,OAAO;gBACvB,QAAQ,OAAO,MAAM;gBACrB,kBAAkB,oBAAoB,WAAW;gBACjD,UAAU,OAAO,QAAQ,IAAI;gBAC7B,WAAW,OAAO,SAAS,IAAI;YACjC;YAEA,MAAM,IAAA,oKAAW,EAAC,MAAM,GAAG,EAAE,SAAS,MAAM,EAAE;YAE9C,MAAM,qBAA4B;gBAChC,GAAG,KAAK;gBACR,GAAG,OAAO;gBACV,MAAM,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,OAAO,OAAO,KAAK;gBAClD,MAAM,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,OAAO,MAAM,KAAK;YACnD;YAEA,eAAe;YACf,MAAM;gBACJ,OAAO;gBACP,aAAa,AAAC,GAAoB,OAAlB,OAAO,OAAO,EAAC,KAAoB,OAAjB,OAAO,SAAS,EAAC;YACrD;QACF,EAAE,OAAO,OAAY;YACnB,MAAM;gBACJ,OAAO;gBACP,aAAa,MAAM,OAAO,IAAI;gBAC9B,SAAS;YACX;QACF,SAAU;YACR,gBAAgB;QAClB;IACF;IAEA,qBACE,6LAAC,2IAAI;QAAE,GAAG,IAAI;kBACZ,cAAA,6LAAC;YAAK,UAAU,KAAK,YAAY,CAAC;YAAW,WAAU;;8BACrD,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,kJAAW;8CACV,cAAA,6LAAC,6IAAK;wCAAE,GAAG,KAAK;wCAAE,QAAQ;;;;;;;;;;;8CAE5B,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,kJAAW;8CACV,cAAA,6LAAC,6IAAK;wCAAE,GAAG,KAAK;wCAAE,QAAQ;;;;;;;;;;;8CAE5B,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,kJAAW;8CACV,cAAA,6LAAC,6IAAK;wCAAC,aAAY;wCAAe,GAAG,KAAK;;;;;;;;;;;8CAE5C,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,kJAAW;8CACV,cAAA,6LAAC,6IAAK;wCAAC,aAAY;wCAAkB,GAAG,KAAK;;;;;;;;;;;8CAE/C,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,+IAAM;oCAAC,eAAe,MAAM,QAAQ;oCAAE,OAAO,MAAM,KAAK;;sDACvD,6LAAC,kJAAW;sDACV,cAAA,6LAAC,sJAAa;0DACZ,cAAA,6LAAC,oJAAW;oDAAC,aAAY;;;;;;;;;;;;;;;;sDAG7B,6LAAC,sJAAa;sDACX,MAAM,GAAG,CAAC,CAAC,qBACV,6LAAC,mJAAU;oDAAe,OAAO,KAAK,EAAE;8DACrC,KAAK,MAAM;mDADG,KAAK,EAAE;;;;;;;;;;;;;;;;8CAM9B,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,+IAAM;oCAAC,eAAe,MAAM,QAAQ;oCAAE,OAAO,MAAM,KAAK;;sDACvD,6LAAC,kJAAW;sDACV,cAAA,6LAAC,sJAAa;0DACZ,cAAA,6LAAC,oJAAW;oDAAC,aAAY;;;;;;;;;;;;;;;;sDAG7B,6LAAC,sJAAa;sDACX,MAAM,GAAG,CAAC,CAAC,qBACV,6LAAC,mJAAU;oDAAe,OAAO,KAAK,EAAE;8DACrC,KAAK,UAAU;mDADD,KAAK,EAAE;;;;;;;;;;;;;;;;8CAM9B,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;4BAAC,WAAU;;8CAClB,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,kJAAW;8CACV,cAAA,6LAAC,6IAAK;wCACJ,MAAK;wCACL,aAAY;wCACX,GAAG,KAAK;wCACT,OAAO,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,GAAG,MAAM;;;;;;;;;;;8CAGxD,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,kJAAW;8CACV,cAAA,6LAAC,6IAAK;wCAAC,aAAY;wCAAoB,GAAG,KAAK;;;;;;;;;;;8CAEjD,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC,gJAAS;oBACR,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;oCAAC,WAAU;8CAAqB;;;;;;8CAC1C,6LAAC,kJAAW;8CACV,cAAA,6LAAC,6IAAK;wCAAC,aAAY;wCAAuB,GAAG,KAAK;;;;;;;;;;;8CAEpD,6LAAC,kJAAW;oCAAC,WAAU;;;;;;;;;;;;;;;;;;8BAI7B,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC,+IAAM;wBAAC,MAAK;wBAAS,UAAU;;4BAC7B,8BAAgB,6LAAC,+NAAO;gCAAC,WAAU;;;;;;4BAA+B;;;;;;;;;;;;;;;;;;;;;;;AAO/E;GAvNgB;;QACI,2IAAQ;QAGb,4KAAO;;;KAJN","debugId":null}},
    {"offset": {"line": 2340, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,2KAAgB,MAG3B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,4DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,2KAAgB,OAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,2KAAgB,OAGtC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,4HAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,2KAAgB,QAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2465, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ staff: Staff[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { staff: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudentByRut(rut: string): Promise<any | null> {\n  const { data: user, error: userError } = await supabase\n    .from('usuarios')\n    .select('id')\n    .eq('rut', rut)\n    .single();\n\n  if (userError && userError.code !== 'PGRST116') {\n    console.error('Error fetching user by RUT:', userError);\n    throw new Error('No se pudo buscar el usuario por RUT.');\n  }\n\n  if (!user) {\n    return null; // User does not exist\n  }\n\n  const { data: student, error: studentError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro')\n    .eq('id', user.id)\n    .single();\n\n  if (studentError && studentError.code !== 'PGRST116') {\n    console.error('Error fetching student details:', studentError);\n    throw new Error('No se pudo buscar los detalles del estudiante.');\n  }\n\n  return student;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAKsB,WAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2480, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ staff: Staff[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { staff: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudentByRut(rut: string): Promise<any | null> {\n  const { data: user, error: userError } = await supabase\n    .from('usuarios')\n    .select('id')\n    .eq('rut', rut)\n    .single();\n\n  if (userError && userError.code !== 'PGRST116') {\n    console.error('Error fetching user by RUT:', userError);\n    throw new Error('No se pudo buscar el usuario por RUT.');\n  }\n\n  if (!user) {\n    return null; // User does not exist\n  }\n\n  const { data: student, error: studentError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro')\n    .eq('id', user.id)\n    .single();\n\n  if (studentError && studentError.code !== 'PGRST116') {\n    console.error('Error fetching student details:', studentError);\n    throw new Error('No se pudo buscar los detalles del estudiante.');\n  }\n\n  return student;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAuBsB,WAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2495, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ staff: Staff[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { staff: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudentByRut(rut: string): Promise<any | null> {\n  const { data: user, error: userError } = await supabase\n    .from('usuarios')\n    .select('id')\n    .eq('rut', rut)\n    .single();\n\n  if (userError && userError.code !== 'PGRST116') {\n    console.error('Error fetching user by RUT:', userError);\n    throw new Error('No se pudo buscar el usuario por RUT.');\n  }\n\n  if (!user) {\n    return null; // User does not exist\n  }\n\n  const { data: student, error: studentError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro')\n    .eq('id', user.id)\n    .single();\n\n  if (studentError && studentError.code !== 'PGRST116') {\n    console.error('Error fetching student details:', studentError);\n    throw new Error('No se pudo buscar los detalles del estudiante.');\n  }\n\n  return student;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAgCsB,WAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2510, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/StaffList.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useMemo, useEffect } from 'react';\r\nimport type { Staff } from '@/lib/types';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n  DialogDescription,\r\n} from '@/components/ui/dialog';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { PlusCircle, Search, MoreHorizontal, ArrowUp, ArrowDown, Loader2 } from 'lucide-react';\r\nimport { AddStaffForm } from './AddStaffForm';\r\nimport { EditStaffForm } from './EditStaffForm';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Card, CardContent } from './ui/card';\r\nimport { formatChileanRut } from '@/lib/utils';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { Skeleton } from './ui/skeleton';\r\nimport { getStaff, updateStaff, getSexos, getRoles } from '@/lib/actions';\r\n\r\ntype SortableKeys = 'rut' | 'nombreCompleto' | 'rol' | 'status';\r\ntype SortDirection = 'ascending' | 'descending';\r\n\r\ntype SortConfig = {\r\n  key: SortableKeys | null;\r\n  direction: SortDirection;\r\n};\r\n\r\nexport function StaffList() {\r\n  const [staff, setStaff] = useState<Staff[]>([]);\r\n  const [sexos, setSexos] = useState<{ id: string; nombre: string }[]>([]);\r\n  const [roles, setRoles] = useState<{ id: string; nombre_rol: string }[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isFormOpen, setIsFormOpen] = useState(false);\r\n  const [isEditFormOpen, setIsEditFormOpen] = useState(false);\r\n  const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);\r\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ key: null, direction: 'ascending' });\r\n  const { toast } = useToast();\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(10); // You can make this configurable\r\n  const [totalStaff, setTotalStaff] = useState(0);\r\n\r\n  const totalPages = useMemo(() => Math.ceil(totalStaff / pageSize), [totalStaff, pageSize]);\r\n\r\n  useEffect(() => {\r\n    const fetchStaffData = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const [{ staff: staffData, totalCount }, sexosData, rolesData] = await Promise.all([\r\n          getStaff(currentPage, pageSize),\r\n          getSexos(),\r\n          getRoles(),\r\n        ]);\r\n        setStaff(staffData);\r\n        setTotalStaff(totalCount);\r\n        setSexos(sexosData as { id: string; nombre: string }[]);\r\n        setRoles(rolesData as { id: string; nombre_rol: string }[]);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch initial data\", error);\r\n        toast({\r\n          title: 'Error de Carga',\r\n          description: 'No se pudieron cargar los datos del personal.',\r\n          variant: 'destructive',\r\n        });\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchStaffData();\r\n  }, [currentPage, pageSize, toast]);\r\n\r\n  const filteredStaff = useMemo(() =>\r\n    staff.filter(person =>\r\n      `${person.nombres} ${person.apellidos}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      person.email.toLowerCase().includes(searchTerm.toLowerCase())\r\n    ), [staff, searchTerm]);\r\n  \r\n  const sortedAndFilteredStaff = useMemo(() => {\r\n    let sortableItems = [...filteredStaff];\r\n    if (sortConfig.key !== null) {\r\n      sortableItems.sort((a, b) => {\r\n        let aValue: any;\r\n        let bValue: any;\r\n\r\n        if (sortConfig.key === 'nombreCompleto') {\r\n          aValue = `${a.nombres} ${a.apellidos}`;\r\n          bValue = `${b.nombres} ${b.apellidos}`;\r\n        } else if (sortConfig.key === 'rol') {\r\n          aValue = a.role?.nombre_rol || '';\r\n          bValue = b.role?.nombre_rol || '';\r\n        } else {\r\n          aValue = a[sortConfig.key];\r\n          bValue = b[sortConfig.key];\r\n        }\r\n\r\n        if (aValue < bValue) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1;\r\n        }\r\n        if (aValue > bValue) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    return sortableItems;\r\n  }, [filteredStaff, sortConfig]);\r\n  \r\n  const handleAddStaff = (newStaffMember: Staff) => {\r\n    // After adding a staff member, re-fetch the current page to ensure accuracy\r\n    setTotalStaff(prev => prev + 1); // Optimistically increment total count\r\n    setCurrentPage(1); // Go to first page to see the new staff member\r\n    setIsFormOpen(false);\r\n  };\r\n  \r\n  const handleEditClick = (person: Staff) => {\r\n    setSelectedStaff(person);\r\n    setIsEditFormOpen(true);\r\n  };\r\n\r\n  const handleStaffUpdated = (updatedStaff: Staff) => {\r\n    setStaff(prev => prev.map(s => s.rut === updatedStaff.rut ? updatedStaff : s));\r\n    setIsEditFormOpen(false);\r\n    setSelectedStaff(null);\r\n  };\r\n\r\n  const handleStatusChange = async (person: Staff, status: boolean) => {\r\n    try {\r\n      await updateStaff(person.rut, { status }, person.id);\r\n      setStaff(prev => prev.map(s => s.rut === person.rut ? { ...s, status } : s));\r\n      toast({\r\n        title: 'Estado Actualizado',\r\n        description: `La cuenta de ${person.nombres} ${person.apellidos} ha sido ${status ? 'activada' : 'desactivada'}.`,\r\n      });\r\n    } catch (error: any) {\r\n      toast({\r\n        title: 'Error al actualizar estado',\r\n        description: error.message || 'Ocurrió un error desconocido.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const requestSort = (key: SortableKeys) => {\r\n    let direction: SortDirection = 'descending';\r\n    if (sortConfig.key === key && sortConfig.direction === 'descending') {\r\n      direction = 'ascending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  };\r\n\r\n  const getSortIcon = (key: SortableKeys) => {\r\n    if (sortConfig.key !== key) return null;\r\n    return sortConfig.direction === 'ascending' ? <ArrowUp className=\"ml-2 h-4 w-4\" /> : <ArrowDown className=\"ml-2 h-4 w-4\" />;\r\n  };\r\n\r\n  const TableSkeleton = () => (\r\n    <Table>\r\n      <TableHeader>\r\n        <TableRow>\r\n          <TableHead className=\"p-2 sm:p-4\"><Skeleton className=\"h-6 w-20\" /></TableHead>\r\n          <TableHead className=\"p-2 sm:p-4\"><Skeleton className=\"h-6 w-32\" /></TableHead>\r\n          <TableHead className=\"hidden sm:table-cell p-2 sm:p-4\"><Skeleton className=\"h-6 w-16\" /></TableHead>\r\n          <TableHead className=\"hidden md:table-cell p-2 sm:p-4\"><Skeleton className=\"h-6 w-40\" /></TableHead>\r\n          <TableHead className=\"p-2 sm:p-4\"><Skeleton className=\"h-6 w-20\" /></TableHead>\r\n          <TableHead className=\"p-2 sm:p-4\"><Skeleton className=\"h-6 w-20\" /></TableHead>\r\n          <TableHead className=\"text-right p-2 sm:p-4\"><Skeleton className=\"h-6 w-16\" /></TableHead>\r\n        </TableRow>\r\n      </TableHeader>\r\n      <TableBody>\r\n        {[...Array(5)].map((_, i) => <TableRow key={i} className=\"text-xs sm:text-sm\"><TableCell colSpan={7}><Skeleton className=\"h-8 w-full\" /></TableCell></TableRow>)}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n\r\n  const handlePreviousPage = () => {\r\n    setCurrentPage(prev => Math.max(1, prev - 1));\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    setCurrentPage(prev => Math.min(totalPages, prev + 1));\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\r\n      <Card>\r\n        <CardContent className=\"p-2 sm:p-4\">\r\n          <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 mb-4\">\r\n            <div className=\"relative w-full max-w-sm\">\r\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"Buscar...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n            <DialogTrigger asChild>\r\n              <Button className=\"w-full sm:w-auto\">\r\n                <PlusCircle className=\"mr-0 h-4 w-4 md:mr-2\" />\r\n                <span className=\"hidden md:inline\">Añadir Personal</span>\r\n              </Button>\r\n            </DialogTrigger>\r\n          </div>\r\n          <div className=\"rounded-lg border\">\r\n            {isLoading ? <TableSkeleton /> : (\r\n              <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead className=\"p-2 sm:p-4\">\r\n                    <Button variant=\"ghost\" onClick={() => requestSort('rut')}>RUT {getSortIcon('rut')}</Button>\r\n                  </TableHead>\r\n                  <TableHead className=\"p-2 sm:p-4\">\r\n                    <Button variant=\"ghost\" onClick={() => requestSort('nombreCompleto')}>Nombre {getSortIcon('nombreCompleto')}</Button>\r\n                  </TableHead>\r\n                  <TableHead className=\"hidden sm:table-cell p-2 sm:p-4\">Sexo</TableHead>\r\n                  <TableHead className=\"hidden md:table-cell p-2 sm:p-4\">Email</TableHead>\r\n                  <TableHead className=\"p-2 sm:p-4\">\r\n                    <Button variant=\"ghost\" onClick={() => requestSort('rol')}>Rol {getSortIcon('rol')}</Button>\r\n                  </TableHead>\r\n                  <TableHead className=\"p-2 sm:p-4\">\r\n                    <Button variant=\"ghost\" onClick={() => requestSort('status')}>Estado {getSortIcon('status')}</Button>\r\n                  </TableHead>\r\n                  <TableHead className=\"text-right p-2 sm:p-4\">Acciones</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {sortedAndFilteredStaff.length > 0 ? (\r\n                  sortedAndFilteredStaff.map((person) => (\r\n                    <TableRow key={person.rut} className=\"text-xs sm:text-sm\">\r\n                      <TableCell className=\"font-medium p-2 sm:p-4\">{formatChileanRut(person.rut)}</TableCell>\r\n                      <TableCell className=\"p-2 sm:p-4\">{`${person.nombres} ${person.apellidos}`}</TableCell>\r\n                      <TableCell className=\"hidden sm:table-cell p-2 sm:p-4\">{person.sexo?.nombre}</TableCell>\r\n                      <TableCell className=\"hidden md:table-cell p-2 sm:p-4\">{person.email}</TableCell>\r\n                      <TableCell className=\"p-2 sm:p-4\">{person.role?.nombre_rol}</TableCell>\r\n                      <TableCell className=\"p-2 sm:p-4\">\r\n                        <Badge variant={person.status ? 'default' : 'secondary'}>\r\n                          {person.status ? 'Activo' : 'Inactivo'}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right p-2 sm:p-4\">\r\n                        <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEditClick(person)}>\r\n                          Editar\r\n                        </Button>\r\n                      </TableCell>\r\n                 </TableRow>\r\n                ))) : (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7} className=\"h-24 text-center\">\r\n                      No se encontró personal.\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n            )}\r\n          </div>\r\n          <div className=\"flex items-center justify-between py-4\">\r\n            <span className=\"text-sm text-muted-foreground\">\r\n              Mostrando {sortedAndFilteredStaff.length} de {totalStaff} personal\r\n            </span>\r\n            <div className=\"space-x-2 flex items-center\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={handlePreviousPage}\r\n                disabled={currentPage === 1}\r\n              >\r\n                Anterior\r\n              </Button>\r\n              <span className=\"text-sm text-muted-foreground\">\r\n                Página {currentPage} de {totalPages}\r\n              </span>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={handleNextPage}\r\n                disabled={currentPage === totalPages}\r\n              >\r\n                Siguiente\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n      <DialogContent className=\"sm:max-w-2xl\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"font-headline\">Nuevo Personal</DialogTitle>\r\n          <DialogDescription>\r\n            Complete los datos para crear una nueva cuenta.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n        <AddStaffForm onStaffAdded={handleAddStaff} sexos={sexos} roles={roles} />\r\n      </DialogContent>\r\n\r\n      {selectedStaff && (\r\n        <Dialog open={isEditFormOpen} onOpenChange={setIsEditFormOpen}>\r\n          <DialogContent className=\"sm:max-w-2xl\">\r\n            <DialogHeader>\r\n              <DialogTitle className=\"font-headline\">Editar Personal</DialogTitle>\r\n              <DialogDescription>\r\n                Actualice los datos del miembro del personal.\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            <EditStaffForm staff={selectedStaff} onStaffUpdated={handleStaffUpdated} sexos={sexos} roles={roles} />\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </Dialog>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}