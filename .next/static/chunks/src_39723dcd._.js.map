{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,2KAAgB,MAG3B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,4DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,2KAAgB,OAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,2KAAgB,OAGtC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,4HAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,2KAAgB,QAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAuBsB,gBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAmCsB,mBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAmPsB,kBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IA+CsB,uBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAkEsB,yBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/app/page.tsx"],"sourcesContent":["'use client';\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Users, GraduationCap, School, ArrowRight } from \"lucide-react\";\r\nimport Link from 'next/link';\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  getStaffCount,\r\n  getStudentsCount,\r\n  getCoursesCount,\r\n  getRecentEnrollments,\r\n  getRecentStaffActivity,\r\n} from '@/lib/actions';\r\n\r\nexport default function DashboardPage() {\r\n  const [studentCount, setStudentCount] = useState<number | null>(null);\r\n  const [staffCount, setStaffCount] = useState<number | null>(null);\r\n  const [courseCount, setCourseCount] = useState<number | null>(null);\r\n  const [recentEnrollments, setRecentEnrollments] = useState<any[]>([]);\r\n  const [staffActivity, setStaffActivity] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const [students, staff, courses, enrollments, activity] = await Promise.all([\r\n          getStudentsCount(),\r\n          getStaffCount(),\r\n          getCoursesCount(),\r\n          getRecentEnrollments(),\r\n          getRecentStaffActivity(),\r\n        ]);\r\n        setStudentCount(students);\r\n        setStaffCount(staff);\r\n        setCourseCount(courses);\r\n        setRecentEnrollments(enrollments);\r\n        setStaffActivity(activity);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch dashboard data:\", error);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"space-y-8\">\r\n      <div className=\"flex flex-col space-y-2\">\r\n        <h1 className=\"text-3xl font-headline font-bold text-primary\">Bienvenido a AcademiaLink</h1>\r\n        <p className=\"text-muted-foreground\">Aquí tienes un resumen de la actividad de tu institución.</p>\r\n      </div>\r\n\r\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              Total Estudiantes\r\n            </CardTitle>\r\n            <GraduationCap className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{studentCount !== null ? studentCount : 'Cargando...'}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              {/* Add dynamic percentage change if data is available */}\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Personal Activo</CardTitle>\r\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{staffCount !== null ? staffCount : 'Cargando...'}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              {/* Add dynamic percentage change if data is available */}\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">Cursos Totales</CardTitle>\r\n            <School className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{courseCount !== null ? courseCount : 'Cargando...'}</div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              {/* Add dynamic percentage change if data is available */}\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between\">\r\n            <CardTitle className=\"font-headline\">Matriculaciones Recientes</CardTitle>\r\n            <Button variant=\"ghost\" size=\"sm\" asChild>\r\n              <Link href=\"/students\">\r\n                Ver todos <ArrowRight className=\"ml-2 h-4 w-4\" />\r\n              </Link>\r\n            </Button>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ul className=\"space-y-4\">\r\n              {recentEnrollments.length > 0 ? (\r\n                recentEnrollments.map((student, i) => (\r\n                  <li key={i} className=\"flex items-center justify-between\">\r\n                    <div>\r\n                      <p className=\"font-medium\">{student.name}</p>\r\n                      <p className=\"text-sm text-muted-foreground\">{student.grade}</p>\r\n                    </div>\r\n                    <span className=\"text-xs text-muted-foreground\">{new Date(student.enrollmentDate).toLocaleDateString()}</span>\r\n                  </li>\r\n                ))\r\n              ) : (\r\n                <li className=\"text-muted-foreground\">No hay matriculaciones recientes.</li>\r\n              )}\r\n            </ul>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between\">\r\n            <CardTitle className=\"font-headline\">Actividad del Personal</CardTitle>\r\n             <Button variant=\"ghost\" size=\"sm\" asChild>\r\n              <Link href=\"/staff\">\r\n                Ver todo <ArrowRight className=\"ml-2 h-4 w-4\" />\r\n              </Link>\r\n            </Button>\r\n          </CardHeader>\r\n          <CardContent>\r\n             <ul className=\"space-y-4\">\r\n              {staffActivity.length > 0 ? (\r\n                staffActivity.map((activity, i) => (\r\n                  <li key={i} className=\"flex items-center\">\r\n                    <div className=\"flex flex-col\">\r\n                      <p className=\"text-sm\"><span className=\"font-semibold\">{activity.name}</span> {activity.action}</p>\r\n                      {/* Assuming activity object might have a timestamp for more accurate display */}\r\n                      <span className=\"text-xs text-muted-foreground\"></span>\r\n                    </div>\r\n                  </li>\r\n                ))\r\n              ) : (\r\n                <li className=\"text-muted-foreground\">No hay actividad reciente del personal.</li>\r\n              )}\r\n            </ul>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\n\n"],"names":[],"mappings":";;;;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;;;AANA;;;;;;;AAce,SAAS;;IACtB,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAgB;IAChE,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,yKAAQ,EAAgB;IAC5D,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAgB;IAC9D,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,yKAAQ,EAAQ,EAAE;IACpE,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,yKAAQ,EAAQ,EAAE;IAE5D,IAAA,0KAAS;mCAAC;YACR,eAAe;gBACb,IAAI;oBACF,MAAM,CAAC,UAAU,OAAO,SAAS,aAAa,SAAS,GAAG,MAAM,QAAQ,GAAG,CAAC;wBAC1E,IAAA,yKAAgB;wBAChB,IAAA,sKAAa;wBACb,IAAA,wKAAe;wBACf,IAAA,6KAAoB;wBACpB,IAAA,+KAAsB;qBACvB;oBACD,gBAAgB;oBAChB,cAAc;oBACd,eAAe;oBACf,qBAAqB;oBACrB,iBAAiB;gBACnB,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,mCAAmC;gBACnD;YACF;YACA;QACF;kCAAG,EAAE;IAEL,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAG,WAAU;kCAAgD;;;;;;kCAC9D,6LAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;0BAGvC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAsB;;;;;;kDAG3C,6LAAC,4OAAa;wCAAC,WAAU;;;;;;;;;;;;0CAE3B,6LAAC,kJAAW;;kDACV,6LAAC;wCAAI,WAAU;kDAAsB,iBAAiB,OAAO,eAAe;;;;;;kDAC5E,6LAAC;wCAAE,WAAU;;;;;;;;;;;;;;;;;;kCAKjB,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAsB;;;;;;kDAC3C,6LAAC,gNAAK;wCAAC,WAAU;;;;;;;;;;;;0CAEnB,6LAAC,kJAAW;;kDACV,6LAAC;wCAAI,WAAU;kDAAsB,eAAe,OAAO,aAAa;;;;;;kDACxE,6LAAC;wCAAE,WAAU;;;;;;;;;;;;;;;;;;kCAKjB,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAsB;;;;;;kDAC3C,6LAAC,mNAAM;wCAAC,WAAU;;;;;;;;;;;;0CAEpB,6LAAC,kJAAW;;kDACV,6LAAC;wCAAI,WAAU;kDAAsB,gBAAgB,OAAO,cAAc;;;;;;kDAC1E,6LAAC;wCAAE,WAAU;;;;;;;;;;;;;;;;;;;;;;;;0BAMnB,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAgB;;;;;;kDACrC,6LAAC,+IAAM;wCAAC,SAAQ;wCAAQ,MAAK;wCAAK,OAAO;kDACvC,cAAA,6LAAC,0KAAI;4CAAC,MAAK;;gDAAY;8DACX,6LAAC,mOAAU;oDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;0CAItC,6LAAC,kJAAW;0CACV,cAAA,6LAAC;oCAAG,WAAU;8CACX,kBAAkB,MAAM,GAAG,IAC1B,kBAAkB,GAAG,CAAC,CAAC,SAAS,kBAC9B,6LAAC;4CAAW,WAAU;;8DACpB,6LAAC;;sEACC,6LAAC;4DAAE,WAAU;sEAAe,QAAQ,IAAI;;;;;;sEACxC,6LAAC;4DAAE,WAAU;sEAAiC,QAAQ,KAAK;;;;;;;;;;;;8DAE7D,6LAAC;oDAAK,WAAU;8DAAiC,IAAI,KAAK,QAAQ,cAAc,EAAE,kBAAkB;;;;;;;2CAL7F;;;;kEASX,6LAAC;wCAAG,WAAU;kDAAwB;;;;;;;;;;;;;;;;;;;;;;kCAK9C,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAgB;;;;;;kDACpC,6LAAC,+IAAM;wCAAC,SAAQ;wCAAQ,MAAK;wCAAK,OAAO;kDACxC,cAAA,6LAAC,0KAAI;4CAAC,MAAK;;gDAAS;8DACT,6LAAC,mOAAU;oDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;0CAIrC,6LAAC,kJAAW;0CACT,cAAA,6LAAC;oCAAG,WAAU;8CACZ,cAAc,MAAM,GAAG,IACtB,cAAc,GAAG,CAAC,CAAC,UAAU,kBAC3B,6LAAC;4CAAW,WAAU;sDACpB,cAAA,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAE,WAAU;;0EAAU,6LAAC;gEAAK,WAAU;0EAAiB,SAAS,IAAI;;;;;;4DAAQ;4DAAE,SAAS,MAAM;;;;;;;kEAE9F,6LAAC;wDAAK,WAAU;;;;;;;;;;;;2CAJX;;;;kEASX,6LAAC;wCAAG,WAAU;kDAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQtD;GAtIwB;KAAA","debugId":null}}]
}