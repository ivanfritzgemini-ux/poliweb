{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAgMsB,gBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAoSsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IA+PsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAuGsB,kBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/EnrollStudentForm.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '@/components/ui/form';\r\nimport { Input } from '@/components/ui/input';\r\nimport type { Student } from '@/lib/types';\r\nimport { getStaffByRut, getSexos, getCourses, addStudent, createUser, getRoleIdByName } from '@/lib/actions';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { Loader2, Search } from 'lucide-react';\r\nimport { formatChileanRut, validateChileanRut } from '@/lib/utils';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from './ui/select';\r\n\r\nconst formSchema = z.object({\r\n  id: z.string().min(1, \"El número de registro es requerido.\"),\r\n  rut: z.string().refine(validateChileanRut, { message: 'RUT inválido.' }),\r\n  nombres: z.string().min(2, 'El nombre debe tener al menos 2 caracteres.'),\r\n  apellidos: z.string().min(2, 'Los apellidos deben tener al menos 2 caracteres.'),\r\n  sexo_id: z.string({ required_error: 'Debe seleccionar un sexo.' }),\r\n  fecha_nacimiento: z.string({ required_error: 'Debe seleccionar una fecha de nacimiento.' }).refine((dateString) => {\r\n    const date = new Date(dateString);\r\n    return !isNaN(date.getTime());\r\n  }, {\r\n    message: 'La fecha de nacimiento no es válida.',\r\n  }),\r\n  email: z.string().email('Email inválido.'),\r\n  phone: z.string().min(5, 'Número de teléfono inválido.').optional().or(z.literal('')),\r\n  address: z.string().min(5, 'Dirección inválida.').optional().or(z.literal('')),\r\n  curso_id: z.string({ required_error: 'Debe seleccionar un curso.' }),\r\n  enrollmentDate: z.string({ required_error: 'Debe seleccionar una fecha de matrícula.' }).refine((dateString) => {\r\n    const date = new Date(dateString);\r\n    return !isNaN(date.getTime());\r\n  }, {\r\n    message: 'La fecha de matrícula no es válida.',\r\n  }),\r\n});\r\n\r\ntype EnrollStudentFormProps = {\r\n  nextId: number;\r\n  sexos: { id: string; nombre: string }[];\r\n  courses: { id: string; nombre: string }[];\r\n  onStudentAdded: (student: Student) => void;\r\n};\r\n\r\nexport function EnrollStudentForm({ onStudentAdded, nextId, sexos: initialSexos, courses: initialCourses }: EnrollStudentFormProps) {\r\n  const { toast } = useToast();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const [sexos, setSexos] = useState(initialSexos);\r\n  const [courses, setCourses] = useState(initialCourses);\r\n  const rutInputRef = useRef<HTMLInputElement>(null);\r\n  const [foundUserId, setFoundUserId] = useState<string | null>(null);\r\n  const [studentRoleId, setStudentRoleId] = useState<string | null>(null);\r\n\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      id: String(nextId),\r\n      rut: '',\r\n      nombres: '',\r\n      apellidos: '',\r\n      sexo_id: '',\r\n      fecha_nacimiento: '',\r\n      email: '',\r\n      phone: '',\r\n      address: '',\r\n      curso_id: '',\r\n      enrollmentDate: new Date().toISOString().split('T')[0],\r\n    },\r\n  });\r\n  \r\n  useEffect(() => {\r\n    rutInputRef.current?.focus();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      if (!initialSexos || initialSexos.length === 0) {\r\n        const fetchedSexos = await getSexos();\r\n        setSexos(fetchedSexos as { id: string; nombre: string }[]);\r\n      }\r\n      if (!initialCourses || initialCourses.length === 0) {\r\n        const fetchedCourses = await getCourses();\r\n        setCourses(fetchedCourses);\r\n      }\r\n      const roleId = await getRoleIdByName('Estudiante');\r\n      setStudentRoleId(roleId);\r\n    }\r\n    fetchData();\r\n  }, [initialSexos, initialCourses]);\r\n\r\n  const handleSearchByRut = async () => {\r\n    const rut = form.getValues('rut');\r\n    if (!validateChileanRut(rut)) {\r\n      form.setError('rut', { type: 'manual', message: 'RUT inválido.' });\r\n      return;\r\n    }\r\n    setIsSearching(true);\r\n    try {\r\n      const person = await getStaffByRut(rut);\r\n      if (person) {\r\n        setFoundUserId(person.id);\r\n        form.setValue('nombres', person.nombres);\r\n        form.setValue('apellidos', person.apellidos);\r\n        form.setValue('email', person.email);\r\n        form.setValue('phone', person.telefono || '');\r\n        form.setValue('address', person.direccion || '');\r\n        form.setValue('fecha_nacimiento', person.fecha_nacimiento ? new Date(person.fecha_nacimiento).toISOString().split('T')[0] : '');\r\n        if (person.sexo) form.setValue('sexo_id', person.sexo.id);\r\n        toast({ title: 'Persona Encontrada', description: 'Datos cargados en el formulario.' });\r\n      } else {\r\n        setFoundUserId(null);\r\n        toast({ title: 'No Encontrado', description: 'No se encontró a nadie con ese RUT. Puede registrarlo manualmente.', variant: 'destructive' });\r\n      }\r\n    } catch (error: any) {\r\n      toast({\r\n        title: 'Error en la Búsqueda',\r\n        description: error.message || 'No se pudo realizar la búsqueda.',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsSearching(false);\r\n    }\r\n  };\r\n\r\n  async function onSubmit(values: z.infer<typeof formSchema>) {\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      let userId = foundUserId;\r\n      const serverValues = {\r\n        ...values,\r\n        fecha_nacimiento: new Date(values.fecha_nacimiento).toISOString(),\r\n        enrollmentDate: new Date(values.enrollmentDate).toISOString(),\r\n      };\r\n\r\n      if (!userId) {\r\n        // User not found, create a new user\r\n        userId = await createUser({\r\n          rut: serverValues.rut,\r\n          nombres: serverValues.nombres,\r\n          apellidos: serverValues.apellidos,\r\n          email: serverValues.email,\r\n          phone: serverValues.phone,\r\n          address: serverValues.address,\r\n          sexo_id: serverValues.sexo_id,\r\n          fecha_nacimiento: serverValues.fecha_nacimiento,\r\n        }, studentRoleId);\r\n      }\r\n\r\n      const studentName = `${values.nombres} ${values.apellidos}`;\r\n      const newStudentData = await addStudent({ ...serverValues, usuario: userId });\r\n\r\n      // Construct the full student object for optimistic update\r\n      const fullNewStudent = {\r\n        ...values,\r\n        id: values.id, // nro_registro\r\n        sexo: sexos.find(s => s.id === values.sexo_id) || null,\r\n        grade: courses.find(c => c.id === values.curso_id)?.nombre || '',\r\n      };\r\n      onStudentAdded(fullNewStudent as Student);\r\n      toast({\r\n        title: 'Estudiante Matriculado',\r\n        description: `${studentName} ha sido añadido exitosamente.`,\r\n      });\r\n      form.reset();\r\n    } catch (error: any) {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.message || 'Ocurrió un error al matricular al estudiante.',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n        <FormField\r\n            control={form.control}\r\n            name=\"id\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Número de Registro</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"Ej: STU-001\" {...field} readOnly />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        <div className=\"flex items-end gap-2\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"rut\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"flex-grow\">\r\n                <FormLabel>RUT</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"12.345.678-9\" {...field} ref={rutInputRef} onBlur={(e) => field.onChange(formatChileanRut(e.target.value))}/>\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <Button type=\"button\" onClick={handleSearchByRut} disabled={isSearching} className=\"h-10\">\r\n            {isSearching ? (\r\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n            ) : (\r\n              <Search className=\"h-4 w-4\" />\r\n            )}\r\n            <span className=\"sr-only\">Buscar</span>\r\n          </Button>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\r\n          <FormField\r\n            control={form.control}\r\n            name=\"nombres\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Nombre Completo</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"Ej: Juan Pérez\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={form.control}\r\n            name=\"apellidos\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Apellidos</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"Ej: Pérez Díaz\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={form.control}\r\n            name=\"enrollmentDate\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Fecha de Matrícula</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"date\"\r\n                    placeholder=\"YYYY-MM-DD\"\r\n                    {...field}\r\n                    value={field.value ? field.value.split('T')[0] : ''}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={form.control}\r\n            name=\"curso_id\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Curso</FormLabel>\r\n                <Select onValueChange={field.onChange} value={field.value}>\r\n                  <FormControl>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Seleccione un curso\"/>\r\n                    </SelectTrigger>\r\n                  </FormControl>\r\n                  <SelectContent>\r\n                    {courses.map((course) => (\r\n                      <SelectItem key={course.id} value={course.id}>\r\n                        {course.nombre}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={form.control}\r\n            name=\"email\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Email</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"ejemplo@email.com\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={form.control}\r\n            name=\"sexo_id\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Sexo</FormLabel>\r\n                <Select onValueChange={field.onChange} value={field.value}>\r\n                  <FormControl>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Seleccione el sexo\" />\r\n                    </SelectTrigger>\r\n                  </FormControl>\r\n                  <SelectContent>\r\n                    {sexos.map((sexo) => (\r\n                      <SelectItem key={sexo.id} value={sexo.id}>\r\n                        {sexo.nombre}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={form.control}\r\n            name=\"fecha_nacimiento\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Fecha de Nacimiento</FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    type=\"date\"\r\n                    placeholder=\"YYYY-MM-DD\"\r\n                    {...field}\r\n                    value={field.value ? field.value.split('T')[0] : ''}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={form.control}\r\n            name=\"phone\"\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel>Teléfono</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"555-123-4567\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n          <FormField\r\n            control={form.control}\r\n            name=\"address\"\r\n            render={({ field }) => (\r\n              <FormItem className=\"sm:col-span-2\">\r\n                <FormLabel>Dirección</FormLabel>\r\n                <FormControl>\r\n                  <Input placeholder=\"123 Calle Falsa, Ciudad\" {...field} />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n        </div>\r\n        <div className=\"flex justify-end\">\r\n          <Button type=\"submit\" disabled={isSubmitting} className=\"w-full sm:w-auto\">\r\n            {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n            Matricular Estudiante\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Form>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;AACA;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AArBA;;;;;;;;;;;;;AA6BA,MAAM,aAAa,4IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,4IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACtB,KAAK,4IAAC,CAAC,MAAM,GAAG,MAAM,CAAC,4IAAkB,EAAE;QAAE,SAAS;IAAgB;IACtE,SAAS,4IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC3B,WAAW,4IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,SAAS,4IAAC,CAAC,MAAM,CAAC;QAAE,gBAAgB;IAA4B;IAChE,kBAAkB,4IAAC,CAAC,MAAM,CAAC;QAAE,gBAAgB;IAA4C,GAAG,MAAM,CAAC,CAAC;QAClG,MAAM,OAAO,IAAI,KAAK;QACtB,OAAO,CAAC,MAAM,KAAK,OAAO;IAC5B,GAAG;QACD,SAAS;IACX;IACA,OAAO,4IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,OAAO,4IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,gCAAgC,QAAQ,GAAG,EAAE,CAAC,4IAAC,CAAC,OAAO,CAAC;IACjF,SAAS,4IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,uBAAuB,QAAQ,GAAG,EAAE,CAAC,4IAAC,CAAC,OAAO,CAAC;IAC1E,UAAU,4IAAC,CAAC,MAAM,CAAC;QAAE,gBAAgB;IAA6B;IAClE,gBAAgB,4IAAC,CAAC,MAAM,CAAC;QAAE,gBAAgB;IAA2C,GAAG,MAAM,CAAC,CAAC;QAC/F,MAAM,OAAO,IAAI,KAAK;QACtB,OAAO,CAAC,MAAM,KAAK,OAAO;IAC5B,GAAG;QACD,SAAS;IACX;AACF;AASO,SAAS,kBAAkB,KAAgG;QAAhG,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,YAAY,EAAE,SAAS,cAAc,EAA0B,GAAhG;;IAChC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,2IAAQ;IAC1B,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAC;IACjD,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAC;IAC/C,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,yKAAQ,EAAC;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAC;IACvC,MAAM,cAAc,IAAA,uKAAM,EAAmB;IAC7C,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAgB;IAC9D,MAAM,CAAC,eAAe,iBAAiB,GAAG,IAAA,yKAAQ,EAAgB;IAElE,MAAM,OAAO,IAAA,4KAAO,EAA6B;QAC/C,UAAU,IAAA,gLAAW,EAAC;QACtB,eAAe;YACb,IAAI,OAAO;YACX,KAAK;YACL,SAAS;YACT,WAAW;YACX,SAAS;YACT,kBAAkB;YAClB,OAAO;YACP,OAAO;YACP,SAAS;YACT,UAAU;YACV,gBAAgB,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;QACxD;IACF;IAEA,IAAA,0KAAS;uCAAC;gBACR;aAAA,uBAAA,YAAY,OAAO,cAAnB,2CAAA,qBAAqB,KAAK;QAC5B;sCAAG,EAAE;IAEL,IAAA,0KAAS;uCAAC;YACR,eAAe;gBACb,IAAI,CAAC,gBAAgB,aAAa,MAAM,KAAK,GAAG;oBAC9C,MAAM,eAAe,MAAM,IAAA,iKAAQ;oBACnC,SAAS;gBACX;gBACA,IAAI,CAAC,kBAAkB,eAAe,MAAM,KAAK,GAAG;oBAClD,MAAM,iBAAiB,MAAM,IAAA,mKAAU;oBACvC,WAAW;gBACb;gBACA,MAAM,SAAS,MAAM,IAAA,wKAAe,EAAC;gBACrC,iBAAiB;YACnB;YACA;QACF;sCAAG;QAAC;QAAc;KAAe;IAEjC,MAAM,oBAAoB;QACxB,MAAM,MAAM,KAAK,SAAS,CAAC;QAC3B,IAAI,CAAC,IAAA,4IAAkB,EAAC,MAAM;YAC5B,KAAK,QAAQ,CAAC,OAAO;gBAAE,MAAM;gBAAU,SAAS;YAAgB;YAChE;QACF;QACA,eAAe;QACf,IAAI;YACF,MAAM,SAAS,MAAM,IAAA,sKAAa,EAAC;YACnC,IAAI,QAAQ;gBACV,eAAe,OAAO,EAAE;gBACxB,KAAK,QAAQ,CAAC,WAAW,OAAO,OAAO;gBACvC,KAAK,QAAQ,CAAC,aAAa,OAAO,SAAS;gBAC3C,KAAK,QAAQ,CAAC,SAAS,OAAO,KAAK;gBACnC,KAAK,QAAQ,CAAC,SAAS,OAAO,QAAQ,IAAI;gBAC1C,KAAK,QAAQ,CAAC,WAAW,OAAO,SAAS,IAAI;gBAC7C,KAAK,QAAQ,CAAC,oBAAoB,OAAO,gBAAgB,GAAG,IAAI,KAAK,OAAO,gBAAgB,EAAE,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG;gBAC5H,IAAI,OAAO,IAAI,EAAE,KAAK,QAAQ,CAAC,WAAW,OAAO,IAAI,CAAC,EAAE;gBACxD,MAAM;oBAAE,OAAO;oBAAsB,aAAa;gBAAmC;YACvF,OAAO;gBACL,eAAe;gBACf,MAAM;oBAAE,OAAO;oBAAiB,aAAa;oBAAsE,SAAS;gBAAc;YAC5I;QACF,EAAE,OAAO,OAAY;YACnB,MAAM;gBACJ,OAAO;gBACP,aAAa,MAAM,OAAO,IAAI;gBAC9B,SAAS;YACX;QACF,SAAU;YACR,eAAe;QACjB;IACF;IAEA,eAAe,SAAS,MAAkC;QACxD,gBAAgB;QAEhB,IAAI;gBA8BO;YA7BT,IAAI,SAAS;YACb,MAAM,eAAe;gBACnB,GAAG,MAAM;gBACT,kBAAkB,IAAI,KAAK,OAAO,gBAAgB,EAAE,WAAW;gBAC/D,gBAAgB,IAAI,KAAK,OAAO,cAAc,EAAE,WAAW;YAC7D;YAEA,IAAI,CAAC,QAAQ;gBACX,oCAAoC;gBACpC,SAAS,MAAM,IAAA,mKAAU,EAAC;oBACxB,KAAK,aAAa,GAAG;oBACrB,SAAS,aAAa,OAAO;oBAC7B,WAAW,aAAa,SAAS;oBACjC,OAAO,aAAa,KAAK;oBACzB,OAAO,aAAa,KAAK;oBACzB,SAAS,aAAa,OAAO;oBAC7B,SAAS,aAAa,OAAO;oBAC7B,kBAAkB,aAAa,gBAAgB;gBACjD,GAAG;YACL;YAEA,MAAM,cAAc,AAAC,GAAoB,OAAlB,OAAO,OAAO,EAAC,KAAoB,OAAjB,OAAO,SAAS;YACzD,MAAM,iBAAiB,MAAM,IAAA,mKAAU,EAAC;gBAAE,GAAG,YAAY;gBAAE,SAAS;YAAO;YAE3E,0DAA0D;YAC1D,MAAM,iBAAiB;gBACrB,GAAG,MAAM;gBACT,IAAI,OAAO,EAAE;gBACb,MAAM,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,OAAO,OAAO,KAAK;gBAClD,OAAO,EAAA,gBAAA,QAAQ,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,OAAO,QAAQ,eAA1C,oCAAA,cAA6C,MAAM,KAAI;YAChE;YACA,eAAe;YACf,MAAM;gBACJ,OAAO;gBACP,aAAa,AAAC,GAAc,OAAZ,aAAY;YAC9B;YACA,KAAK,KAAK;QACZ,EAAE,OAAO,OAAY;YACnB,MAAM;gBACJ,OAAO;gBACP,aAAa,MAAM,OAAO,IAAI;gBAC9B,SAAS;YACX;QACF,SAAU;YACR,gBAAgB;QAClB;IACF;IAEA,qBACE,6LAAC,2IAAI;QAAE,GAAG,IAAI;kBACZ,cAAA,6LAAC;YAAK,UAAU,KAAK,YAAY,CAAC;YAAW,WAAU;;8BACrD,6LAAC,gJAAS;oBACN,SAAS,KAAK,OAAO;oBACrB,MAAK;oBACL,QAAQ;4BAAC,EAAE,KAAK,EAAE;6CAChB,6LAAC,+IAAQ;;8CACP,6LAAC,gJAAS;8CAAC;;;;;;8CACX,6LAAC,kJAAW;8CACV,cAAA,6LAAC,6IAAK;wCAAC,aAAY;wCAAe,GAAG,KAAK;wCAAE,QAAQ;;;;;;;;;;;8CAEtD,6LAAC,kJAAW;;;;;;;;;;;;;;;;;8BAIpB,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;oCAAC,WAAU;;sDAClB,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;gDAAC,aAAY;gDAAgB,GAAG,KAAK;gDAAE,KAAK;gDAAa,QAAQ,CAAC,IAAM,MAAM,QAAQ,CAAC,IAAA,0IAAgB,EAAC,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;sDAE9H,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,+IAAM;4BAAC,MAAK;4BAAS,SAAS;4BAAmB,UAAU;4BAAa,WAAU;;gCAChF,4BACC,6LAAC,+NAAO;oCAAC,WAAU;;;;;yDAEnB,6LAAC,mNAAM;oCAAC,WAAU;;;;;;8CAEpB,6LAAC;oCAAK,WAAU;8CAAU;;;;;;;;;;;;;;;;;;8BAI9B,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;;sDACP,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;gDAAC,aAAY;gDAAkB,GAAG,KAAK;;;;;;;;;;;sDAE/C,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;;sDACP,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;gDAAC,aAAY;gDAAkB,GAAG,KAAK;;;;;;;;;;;sDAE/C,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;;sDACP,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;gDACJ,MAAK;gDACL,aAAY;gDACX,GAAG,KAAK;gDACT,OAAO,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG;;;;;;;;;;;sDAGrD,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;;sDACP,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,+IAAM;4CAAC,eAAe,MAAM,QAAQ;4CAAE,OAAO,MAAM,KAAK;;8DACvD,6LAAC,kJAAW;8DACV,cAAA,6LAAC,sJAAa;kEACZ,cAAA,6LAAC,oJAAW;4DAAC,aAAY;;;;;;;;;;;;;;;;8DAG7B,6LAAC,sJAAa;8DACX,QAAQ,GAAG,CAAC,CAAC,uBACZ,6LAAC,mJAAU;4DAAiB,OAAO,OAAO,EAAE;sEACzC,OAAO,MAAM;2DADC,OAAO,EAAE;;;;;;;;;;;;;;;;sDAMhC,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;;sDACP,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;gDAAC,aAAY;gDAAqB,GAAG,KAAK;;;;;;;;;;;sDAElD,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;;sDACP,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,+IAAM;4CAAC,eAAe,MAAM,QAAQ;4CAAE,OAAO,MAAM,KAAK;;8DACvD,6LAAC,kJAAW;8DACV,cAAA,6LAAC,sJAAa;kEACZ,cAAA,6LAAC,oJAAW;4DAAC,aAAY;;;;;;;;;;;;;;;;8DAG7B,6LAAC,sJAAa;8DACX,MAAM,GAAG,CAAC,CAAC,qBACV,6LAAC,mJAAU;4DAAe,OAAO,KAAK,EAAE;sEACrC,KAAK,MAAM;2DADG,KAAK,EAAE;;;;;;;;;;;;;;;;sDAM9B,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;;sDACP,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;gDACJ,MAAK;gDACL,aAAY;gDACX,GAAG,KAAK;gDACT,OAAO,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG;;;;;;;;;;;sDAGrD,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;;sDACP,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;gDAAC,aAAY;gDAAgB,GAAG,KAAK;;;;;;;;;;;sDAE7C,6LAAC,kJAAW;;;;;;;;;;;;;;;;;sCAIlB,6LAAC,gJAAS;4BACR,SAAS,KAAK,OAAO;4BACrB,MAAK;4BACL,QAAQ;oCAAC,EAAE,KAAK,EAAE;qDAChB,6LAAC,+IAAQ;oCAAC,WAAU;;sDAClB,6LAAC,gJAAS;sDAAC;;;;;;sDACX,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;gDAAC,aAAY;gDAA2B,GAAG,KAAK;;;;;;;;;;;sDAExD,6LAAC,kJAAW;;;;;;;;;;;;;;;;;;;;;;;8BAKpB,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC,+IAAM;wBAAC,MAAK;wBAAS,UAAU;wBAAc,WAAU;;4BACrD,8BAAgB,6LAAC,+NAAO;gCAAC,WAAU;;;;;;4BAA+B;;;;;;;;;;;;;;;;;;;;;;;AAO/E;GA7UgB;;QACI,2IAAQ;QASb,4KAAO;;;KAVN","debugId":null}}]
}