{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,2KAAgB,MAG5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAM,KAAK;QAAK,WAAW,IAAA,4HAAE,EAAC,mBAAmB;QAAa,GAAG,KAAK;;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,2KAAgB,OAG/B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,+EACA;QAED,GAAG,KAAK;;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,2KAAgB,QAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,oGACA;QAED,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,2KAAgB,QAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,2KAAgB,QAGnC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,6KAAoB;AAEnC,MAAM,gBAAgB,gLAAuB;AAE7C,MAAM,eAAe,+KAAsB;AAE3C,MAAM,cAAc,8KAAqB;AAEzC,MAAM,8BAAgB,2KAAgB,CAGpC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,gLAAuB;QACtB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,2KAAgB,OAGpC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,gLAAuB;gBACtB,KAAK;gBACL,WAAW,IAAA,4HAAE,EACX,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,8KAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,oMAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe;QAAC,EACpB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe;QAAC,EACpB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,8KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,qDACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG,8KAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,2KAAgB,OAGxC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,kBAAkB,WAAW,GAAG,oLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,0KAAG,EACvB;AAGF,MAAM,sBAAQ,2KAAgB,MAI5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,4KAAmB;QAClB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;;AAGb,MAAM,WAAW,GAAG,4KAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 390, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 621, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(): Promise<Staff[]> {\n  const { data, error } = await supabase.from('usuarios').select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)');\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n  return data as Staff[];\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_de_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(): Promise<any[]> {\n  // This query joins student details with user details.\n  // It assumes 'estudiantes_detalles' has a 'rut' column that is a foreign key to 'usuarios.rut'.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, status, curso:cursos(nivel, letra), usuario:usuarios(rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(nombre), email, telefono, direccion)');\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n  return data.map(s => ({ ...s.usuario, ...s, id: s.nro_registro, grade: s.curso?.nivel ? `${s.curso.nivel} ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula }));\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel} ${curso.letra}` }));\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        nro_registro: studentData.id,\n        rut: studentData.rut,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n        status: 'active',\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;IA0GsB,gBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(): Promise<Staff[]> {\n  const { data, error } = await supabase.from('usuarios').select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)');\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n  return data as Staff[];\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_de_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(): Promise<any[]> {\n  // This query joins student details with user details.\n  // It assumes 'estudiantes_detalles' has a 'rut' column that is a foreign key to 'usuarios.rut'.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, status, curso:cursos(nivel, letra), usuario:usuarios(rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(nombre), email, telefono, direccion)');\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n  return data.map(s => ({ ...s.usuario, ...s, id: s.nro_registro, grade: s.curso?.nivel ? `${s.curso.nivel} ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula }));\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel} ${curso.letra}` }));\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        nro_registro: studentData.id,\n        rut: studentData.rut,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n        status: 'active',\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;IAcsB,WAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 651, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(): Promise<Staff[]> {\n  const { data, error } = await supabase.from('usuarios').select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)');\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n  return data as Staff[];\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_de_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(): Promise<any[]> {\n  // This query joins student details with user details.\n  // It assumes 'estudiantes_detalles' has a 'rut' column that is a foreign key to 'usuarios.rut'.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, status, curso:cursos(nivel, letra), usuario:usuarios(rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(nombre), email, telefono, direccion)');\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n  return data.map(s => ({ ...s.usuario, ...s, id: s.nro_registro, grade: s.curso?.nivel ? `${s.curso.nivel} ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula }));\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel} ${curso.letra}` }));\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        nro_registro: studentData.id,\n        rut: studentData.rut,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n        status: 'active',\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;IAsIsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 666, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(): Promise<Staff[]> {\n  const { data, error } = await supabase.from('usuarios').select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)');\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n  return data as Staff[];\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_de_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(): Promise<any[]> {\n  // This query joins student details with user details.\n  // It assumes 'estudiantes_detalles' has a 'rut' column that is a foreign key to 'usuarios.rut'.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, status, curso:cursos(nivel, letra), usuario:usuarios(rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(nombre), email, telefono, direccion)');\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n  return data.map(s => ({ ...s.usuario, ...s, id: s.nro_registro, grade: s.curso?.nivel ? `${s.curso.nivel} ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula }));\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel} ${curso.letra}` }));\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        nro_registro: studentData.id,\n        rut: studentData.rut,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n        status: 'active',\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;IAiJsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 681, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,6KAAoB;AAEnC,MAAM,cAAc,8KAAqB;AAEzC,MAAM,cAAc,8KAAqB;AAEzC,MAAM,8BAAgB,2KAAgB,MAGpC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC,gLAAuB;QACtB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,mTACA;QAED,GAAG,KAAK;;YAER;0BACD,6LAAC,6KAAoB;gBAAC,OAAO;0BAC3B,cAAA,6LAAC,sOAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;;;AAI7B,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,qCAAuB,2KAAgB,CAG3C,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,uLAA8B;QAC7B,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,gOAAS;YAAC,WAAU;;;;;;;;;;;;MAZnB;AAeN,qBAAqB,WAAW,GAAG,uLAA8B,CAAC,WAAW;AAE7E,MAAM,uCAAyB,2KAAgB,CAG7C,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,yLAAgC;QAC/B,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,sOAAW;YAAC,WAAU;;;;;;;;;;;;MAZrB;AAeN,uBAAuB,WAAW,GAChC,yLAAgC,CAAC,WAAW;AAE9C,MAAM,8BAAgB,2KAAgB,OAGpC,QAAyD;QAAxD,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,QAAQ,EAAE,GAAG,OAAO;yBACvD,6LAAC,+KAAsB;kBACrB,cAAA,6LAAC,gLAAuB;YACtB,KAAK;YACL,WAAW,IAAA,4HAAE,EACX,ucACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;;8BAET,6LAAC;;;;;8BACD,6LAAC,iLAAwB;oBACvB,WAAW,IAAA,4HAAE,EACX,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,6LAAC;;;;;;;;;;;;;;;;;;AAIP,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,8KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,0CAA0C;QACvD,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG,8KAAqB,CAAC,WAAW;AAE3D,MAAM,2BAAa,2KAAgB,OAGjC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC,6KAAoB;QACnB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,6NACA;QAED,GAAG,KAAK;;0BAET,6LAAC;gBAAK,WAAU;0BACd,cAAA,6LAAC,sLAA6B;8BAC5B,cAAA,6LAAC,gNAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAIrB,6LAAC,iLAAwB;0BAAE;;;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAoB,CAAC,WAAW;AAEzD,MAAM,gCAAkB,2KAAgB,QAGtC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,kLAAyB;QACxB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,4BAA4B;QACzC,GAAG,KAAK;;;;;;;;AAGb,gBAAgB,WAAW,GAAG,kLAAyB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 925, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/EnrollStudentForm.tsx"],"sourcesContent":["'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport type { Student } from '@/lib/types';\nimport { getStaffByRut, getSexos, getCourses, addStudent } from '@/lib/actions';\nimport { format } from 'date-fns';\nimport { useToast } from '@/hooks/use-toast';\nimport { useEffect, useState } from 'react';\nimport { Loader2, Search } from 'lucide-react';\nimport { formatChileanRut, validateChileanRut } from '@/lib/utils';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from './ui/select';\n\nconst formSchema = z.object({\n  id: z.string().min(1, \"El número de registro es requerido.\"),\n  rut: z.string().refine(validateChileanRut, { message: 'RUT inválido.' }),\n  nombres: z.string().min(2, 'El nombre debe tener al menos 2 caracteres.'),\n  apellidos: z.string().min(2, 'Los apellidos deben tener al menos 2 caracteres.'),\n  sexo_id: z.string({ required_error: 'Debe seleccionar un sexo.' }),\n  fecha_de_nacimiento: z.string({ required_error: 'Debe seleccionar una fecha de nacimiento.' }).refine(\n    (dateString) => !isNaN(new Date(dateString).getTime()),\n    {\n      message: 'La fecha de nacimiento no es válida.',\n    }\n  ),\n  email: z.string().email('Email inválido.'),\n  phone: z.string().min(5, 'Número de teléfono inválido.'),\n  address: z.string().min(5, 'Dirección inválida.'),\n  curso_id: z.string({ required_error: 'Debe seleccionar un curso.' }),\n  enrollmentDate: z.string({ required_error: 'Debe seleccionar una fecha de matrícula.' }).refine(\n    (dateString) => !isNaN(new Date(dateString).getTime()),\n    {\n      message: 'La fecha de matrícula no es válida.',\n    }\n  ),\n});\n\ntype EnrollStudentFormProps = {\n  studentCount: number;\n  sexos: { id: string; nombre: string }[];\n  courses: { id: string; nombre: string }[];\n  onStudentAdded: (student: Student) => void;\n};\n\nexport function EnrollStudentForm({ onStudentAdded, studentCount, sexos: initialSexos, courses: initialCourses }: EnrollStudentFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [sexos, setSexos] = useState(initialSexos);\n  const [courses, setCourses] = useState(initialCourses);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      id: `STU-${String(studentCount + 1).padStart(3, '0')}`,\n      rut: '',\n      nombres: '',\n      apellidos: '',\n      sexo_id: '',\n      fecha_de_nacimiento: '', // This should be a string in 'yyyy-MM-dd' format\n      email: '',\n      phone: '',\n      address: '',\n      curso_id: '',\n      enrollmentDate: new Date().toISOString().split('T')[0],\n    },\n  });\n  \n  useEffect(() => {\n    // Pre-fill the registration number when the component mounts or student count changes\n    form.setValue('id', `STU-${String(studentCount + 1).padStart(3, '0')}`);\n  }, [studentCount, form]);\n\n  useEffect(() => {\n    async function fetchData() {\n      if (!initialSexos || initialSexos.length === 0) {\n        const fetchedSexos = await getSexos();\n        setSexos(fetchedSexos as { id: string; nombre: string }[]);\n      }\n      if (!initialCourses || initialCourses.length === 0) {\n        const fetchedCourses = await getCourses();\n        setCourses(fetchedCourses);\n      }\n    }\n    fetchData();\n  }, [initialSexos, initialCourses]);\n\n  const handleSearchByRut = async () => {\n    const rut = form.getValues('rut');\n    if (!validateChileanRut(rut)) {\n      form.setError('rut', { type: 'manual', message: 'RUT inválido.' });\n      return;\n    }\n    setIsSearching(true);\n    try {\n      const person = await getStaffByRut(rut);\n      if (person) {\n        form.setValue('nombres', person.nombres);\n        form.setValue('apellidos', person.apellidos);\n        form.setValue('email', person.email);\n        form.setValue('phone', person.telefono || '');\n        form.setValue('address', person.direccion || '');\n        form.setValue('fecha_de_nacimiento', person.fecha_nacimiento ? format(new Date(person.fecha_nacimiento), 'yyyy-MM-dd') : '');\n        if (person.sexo) form.setValue('sexo_id', person.sexo.id);\n        toast({ title: 'Persona Encontrada', description: 'Datos cargados en el formulario.' });\n      } else {\n        toast({ title: 'No Encontrado', description: 'No se encontró a nadie con ese RUT. Puede registrarlo manualmente.', variant: 'destructive' });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Error en la Búsqueda',\n        description: error.message || 'No se pudo realizar la búsqueda.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsSubmitting(true);\n    try {\n      const studentName = `${values.nombres} ${values.apellidos}`;\n      const newStudentData = await addStudent(values);\n\n      // Construct the full student object for optimistic update\n      const fullNewStudent = {\n        ...values,\n        id: values.id, // nro_registro\n        sexo: sexos.find(s => s.id === values.sexo_id) || null,\n        grade: courses.find(c => c.id === values.curso_id)?.nombre || '',\n      };\n      onStudentAdded(fullNewStudent as Student);\n      toast({\n        title: 'Estudiante Matriculado',\n        description: `${studentName} ha sido añadido exitosamente.`,\n      });\n      form.reset();\n    } catch (error: any) {\n      toast({\n        title: 'Error',\n        description: 'Ocurrió un error al matricular al estudiante.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n            control={form.control}\n            name=\"id\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Número de Registro</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Ej: STU-001\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        <div className=\"flex items-end gap-2\">\n          <FormField\n            control={form.control}\n            name=\"rut\"\n            render={({ field }) => (\n              <FormItem className=\"flex-grow\">\n                <FormLabel>RUT</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"12.345.678-9\" {...field} onBlur={(e) => field.onChange(formatChileanRut(e.target.value))}/>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button type=\"button\" onClick={handleSearchByRut} disabled={isSearching} className=\"h-10\">\n            {isSearching ? (\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Search className=\"h-4 w-4\" />\n            )}\n            <span className=\"sr-only\">Buscar</span>\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2\">\n          <FormField\n            control={form.control}\n            name=\"nombres\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Nombre Completo</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Ej: Juan Pérez\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"apellidos\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Apellidos</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Ej: Pérez Díaz\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"enrollmentDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Fecha de Matrícula</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"date\"\n                    {...field}\n                    value={field.value ? format(new Date(field.value), 'yyyy-MM-dd') : ''}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"curso_id\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Curso</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Seleccione un curso\"/>\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {courses.map((course) => (\n                      <SelectItem key={course.id} value={course.id}>\n                        {course.nombre}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"ejemplo@email.com\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"sexo_id\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Sexo</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Seleccione el sexo\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {sexos.map((sexo) => (\n                      <SelectItem key={sexo.id} value={sexo.id}>\n                        {sexo.nombre}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"fecha_de_nacimiento\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Fecha de Nacimiento</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"date\"\n                    {...field}\n                    value={field.value ? format(new Date(field.value), 'yyyy-MM-dd') : ''}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Teléfono</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"555-123-4567\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"address\"\n            render={({ field }) => (\n              <FormItem className=\"sm:col-span-2\">\n                <FormLabel>Dirección</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"123 Calle Falsa, Ciudad\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        <div className=\"flex justify-end\">\n          <Button type=\"submit\" disabled={isSubmitting} className=\"w-full sm:w-auto\">\n            {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Matricular Estudiante\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1780, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,2KAAgB,MAG3B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,4DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,2KAAgB,OAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,2KAAgB,OAGtC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,KAAK;QAAK,WAAW,IAAA,4HAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,2KAAgB,QAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1905, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(): Promise<Staff[]> {\n  const { data, error } = await supabase.from('usuarios').select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)');\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n  return data as Staff[];\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_de_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(): Promise<any[]> {\n  // This query joins student details with user details.\n  // It assumes 'estudiantes_detalles' has a 'rut' column that is a foreign key to 'usuarios.rut'.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, status, curso:cursos(nivel, letra), usuario:usuarios(rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(nombre), email, telefono, direccion)');\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n  return data.map(s => ({ ...s.usuario, ...s, id: s.nro_registro, grade: s.curso?.nivel ? `${s.curso.nivel} ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula }));\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel} ${curso.letra}` }));\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        nro_registro: studentData.id,\n        rut: studentData.rut,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n        status: 'active',\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;IAyHsB,cAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1920, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/StudentList.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useMemo, useEffect } from 'react';\nimport type { Student } from '@/lib/types';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { PlusCircle, Search } from 'lucide-react';\nimport { EnrollStudentForm } from './EnrollStudentForm';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';\nimport { getStudents, getSexos, getCourses } from '@/lib/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { Skeleton } from './ui/skeleton';\n\nexport function StudentList() {\n  const [students, setStudents] = useState<Student[]>([]);\n  const [sexos, setSexos] = useState<{ id: string; nombre: string }[]>([]);\n  const [courses, setCourses] = useState<{ id: string; nombre: string }[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setIsLoading(true);\n      try {\n        const [studentsData, sexosData, coursesData] = await Promise.all([\n          getStudents(),\n          getSexos(),\n          getCourses(),\n        ]);\n\n        setStudents(studentsData as Student[]);\n        setSexos(sexosData as { id: string; nombre: string }[]);\n        setCourses(coursesData as { id: string; nombre: string }[]);\n      } catch (error) {\n        toast({\n          title: 'Error al cargar datos',\n          description: 'No se pudieron cargar los datos iniciales.',\n          variant: 'destructive',\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, [toast]);\n\n  const filteredStudents = useMemo(() =>\n    students.filter(student =>\n      `${student.nombres} ${student.apellidos}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.grade.toLowerCase().includes(searchTerm.toLowerCase())\n    ), [students, searchTerm]);\n\n  const handleAddStudent = (newStudent: Student) => {\n    setStudents(prev => [newStudent, ...prev]);\n    setIsFormOpen(false);\n  };\n\n  const TableSkeleton = () => (\n    <Table>\n      <TableHeader>\n        <TableRow key=\"skeleton-header\">\n          {[...Array(10)].map((_, i) => <TableHead key={i}><Skeleton className=\"h-5 w-full\" /></TableHead>)}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {[...Array(5)].map((_, i) => (\n          <TableRow key={i}>\n            <TableCell colSpan={10}>\n              <Skeleton className=\"h-8 w-full\" />\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n\n  return (\n    <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between gap-4 mb-4\">\n            <div className=\"relative w-full max-w-sm\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Buscar por nombre, ID, grado...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <DialogTrigger asChild>\n              <Button>\n                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                Matricular Estudiante\n              </Button>\n            </DialogTrigger>\n          </div>\n          <div className=\"rounded-lg border\">\n            {isLoading ? <TableSkeleton /> : (\n              <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[100px]\">Nº Registro</TableHead>\n                  <TableHead>RUT</TableHead>\n                  <TableHead>Nombre</TableHead>\n                  <TableHead className=\"hidden md:table-cell\">Sexo</TableHead>\n                  <TableHead className=\"hidden lg:table-cell\">Fec. Nacimiento</TableHead>\n                  <TableHead>Curso</TableHead>\n                  <TableHead className=\"hidden lg:table-cell\">Fec. Matrícula</TableHead>\n                  <TableHead className=\"hidden lg:table-cell\">Fec. Retiro</TableHead>\n                  <TableHead className=\"text-right w-[100px]\">Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredStudents.length > 0 ? (\n                  filteredStudents.map((student) => (\n                    <TableRow key={student.id}>\n                      <TableCell className=\"font-medium\">\n                        {student.id}\n                      </TableCell>\n                      <TableCell>{student.rut}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {`${student.nombres} ${student.apellidos}`}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"hidden md:table-cell\">{student.sexo?.nombre}</TableCell>\n                      <TableCell className=\"hidden lg:table-cell\">{new Date(student.fecha_de_nacimiento).toLocaleDateString('es-ES')}</TableCell>\n                      <TableCell>{student.grade}</TableCell>\n                      <TableCell className=\"hidden lg:table-cell\">{student.fecha_de_retiro ? new Date(student.fecha_de_retiro).toLocaleDateString('es-ES') : '-'}</TableCell>\n                      <TableCell className=\"hidden lg:table-cell\">{new Date(student.enrollmentDate).toLocaleDateString('es-ES')}</TableCell>\n                      <TableCell className=\"text-right\">\n                        <Button variant=\"ghost\" size=\"sm\">Editar</Button>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={10} className=\"h-24 text-center\">\n                      No se encontraron estudiantes.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n      <DialogContent className=\"sm:max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"font-headline\">Matricular Nuevo Estudiante</DialogTitle>\n          <DialogDescription>\n            Complete los detalles a continuación para registrar a un nuevo estudiante. Se generará una foto de perfil por IA si no se carga una.\n          </DialogDescription>\n        </DialogHeader>\n        <EnrollStudentForm onStudentAdded={handleAddStudent} studentCount={students.length} sexos={sexos} courses={courses} />\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}