{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';\r\nimport { NextResponse } from 'next/server';\r\nimport type { NextRequest } from 'next/server';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const res = NextResponse.next();\r\n  const pathname = request.nextUrl.pathname;\r\n  \r\n  // Create Supabase client with middleware helper\r\n  const supabase = createMiddlewareClient({ req: request, res });\r\n  \r\n  // Check auth status\r\n  const { data: { session } } = await supabase.auth.getSession();\r\n  \r\n  // Handle public routes\r\n  const isLoginPage = pathname === '/login' || pathname === '/';\r\n  const isPublicRoute = pathname.startsWith('/_next') || pathname.startsWith('/api/auth');\r\n  \r\n  if (isPublicRoute) {\r\n    return res;\r\n  }\r\n\r\n  // Redirect root to login if not authenticated\r\n  if (pathname === '/' && !session) {\r\n    return NextResponse.redirect(new URL('/login', request.url));\r\n  }\r\n\r\n  // Protect all other routes\r\n  if (!session && !isLoginPage) {\r\n    // Save original URL to redirect back after login\r\n    const redirectUrl = new URL('/login', request.url);\r\n    redirectUrl.searchParams.set('next', pathname);\r\n    return NextResponse.redirect(redirectUrl);\r\n  }\r\n\r\n  // If logged in and trying to access login page or root, redirect to appropriate dashboard\r\n  if (session && isLoginPage) {\r\n    // Redirect will be handled based on role\r\n    return NextResponse.redirect(new URL('/dashboard', request.url));\r\n  }\r\n\r\n  // If session exists but no profile cookie, fetch and store it\r\n  const profile = request.cookies.get('user-profile')?.value;\r\n  if (session && !profile) {\r\n    try {\r\n      const { data: userData, error: userError } = await supabase\r\n        .from('usuarios')\r\n        .select('id, nombres, apellidos, email, role:roles(id, nombre_rol)')\r\n        .eq('id', session.user.id)\r\n        .single();\r\n\r\n      if (userError) {\r\n        // Clear session if profile cannot be found\r\n        await supabase.auth.signOut();\r\n        return NextResponse.redirect(new URL('/login', request.url));\r\n      }\r\n\r\n      if (userData) {\r\n        // Store profile in HTTP-only cookie\r\n        res.cookies.set('user-profile', JSON.stringify(userData), {\r\n          httpOnly: true,\r\n          secure: process.env.NODE_ENV === 'production',\r\n          sameSite: 'lax',\r\n          maxAge: 7 * 24 * 60 * 60, // 1 week\r\n        });\r\n\r\n        // Check role-based access\r\n        if (userData.role?.nombre_rol) {\r\n          const role = userData.role.nombre_rol.toLowerCase();\r\n          \r\n          // Redirect to appropriate section based on role\r\n          if (pathname === '/') {\r\n            let redirectTo = '/';\r\n            switch (role) {\r\n              case 'admin':\r\n                redirectTo = '/admin';\r\n                break;\r\n              case 'staff':\r\n                redirectTo = '/staff';\r\n                break;\r\n              case 'estudiante':\r\n                redirectTo = '/students';\r\n                break;\r\n            }\r\n            if (redirectTo !== '/') {\r\n              return NextResponse.redirect(new URL(redirectTo, request.url));\r\n            }\r\n          }\r\n\r\n          // Prevent access to unauthorized sections\r\n          if (\r\n            (pathname.startsWith('/admin') && role !== 'admin') ||\r\n            (pathname.startsWith('/staff') && !['admin', 'staff'].includes(role)) ||\r\n            (pathname.startsWith('/students') && !['admin', 'staff', 'estudiante'].includes(role))\r\n          ) {\r\n            return NextResponse.redirect(new URL('/unauthorized', request.url));\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user profile:', error);\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n// Specify which routes should be protected by the middleware\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - public files (public directory)\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|public).*)',\r\n  ],\r\n};"],"names":[],"mappings":"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"}}]
}