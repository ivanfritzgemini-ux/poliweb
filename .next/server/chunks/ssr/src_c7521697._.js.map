{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-x-hidden\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className, \"word-break: break-word;\")}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,mNAAgB,CAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,IAAA,yHAAE,EAAC,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,kDAAkD,WAAW;QAC1E,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,mNAAgB,CAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,0KAAoB;AAEnC,MAAM,gBAAgB,6KAAuB;AAE7C,MAAM,eAAe,4KAAsB;AAE3C,MAAM,cAAc,2KAAqB;AAEzC,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,6KAAuB;QACtB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,6KAAuB;gBACtB,KAAK;gBACL,WAAW,IAAA,yHAAE,EACX,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,2KAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,iMAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,iLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,uKAAG,EACvB;AAGF,MAAM,sBAAQ,mNAAgB,CAI5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,yKAAmB;QAClB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,yKAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,0KAAoB;AAEnC,MAAM,cAAc,2KAAqB;AAEzC,MAAM,cAAc,2KAAqB;AAEzC,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,6KAAuB;QACtB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,mTACA;QAED,GAAG,KAAK;;YAER;0BACD,8OAAC,0KAAoB;gBAAC,OAAO;0BAC3B,cAAA,8OAAC,mOAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,qCAAuB,mNAAgB,CAG3C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,oLAA8B;QAC7B,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,6NAAS;YAAC,WAAU;;;;;;;;;;;AAGzB,qBAAqB,WAAW,GAAG,oLAA8B,CAAC,WAAW;AAE7E,MAAM,uCAAyB,mNAAgB,CAG7C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sLAAgC;QAC/B,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,mOAAW;YAAC,WAAU;;;;;;;;;;;AAG3B,uBAAuB,WAAW,GAChC,sLAAgC,CAAC,WAAW;AAE9C,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACzD,8OAAC,4KAAsB;kBACrB,cAAA,8OAAC,6KAAuB;YACtB,KAAK;YACL,WAAW,IAAA,yHAAE,EACX,ucACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;;8BAET,8OAAC;;;;;8BACD,8OAAC,8KAAwB;oBACvB,WAAW,IAAA,yHAAE,EACX,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,8OAAC;;;;;;;;;;;;;;;;AAIP,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,0CAA0C;QACvD,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAoB;QACnB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,6NACA;QAED,GAAG,KAAK;;0BAET,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC,mLAA6B;8BAC5B,cAAA,8OAAC,6MAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAIrB,8OAAC,8KAAwB;0BAAE;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAoB,CAAC,WAAW;AAEzD,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,+KAAyB;QACxB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,4BAA4B;QACzC,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG,+KAAyB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IA6UsB,gBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 662, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/EditStudentForm.tsx"],"sourcesContent":["'use client';\n\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport type { Student } from '@/lib/types';\nimport { useToast } from '@/hooks/use-toast';\nimport { useState } from 'react';\nimport { updateStudent } from '@/lib/actions';\nimport { validateChileanRut } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\nconst formSchema = z.object({\n  rut: z.string().refine(validateChileanRut, { message: 'RUT inválido.' }),\n  nombres: z.string().min(2, 'Los nombres deben tener al menos 2 caracteres.'),\n  apellidos: z.string().min(2, 'Los apellidos deben tener al menos 2 caracteres.'),\n  sexo_id: z.string({ required_error: 'Debe seleccionar un sexo.' }),\n  email: z.string().email('Email inválido.'),\n  fecha_nacimiento: z.string({ required_error: 'Debe seleccionar una fecha de nacimiento.' }),\n  telefono: z.string().optional(),\n  direccion: z.string().optional(),\n  curso_id: z.string({ required_error: 'Debe seleccionar un curso.' }),\n  enrollmentDate: z.string({ required_error: 'Debe seleccionar una fecha de matrícula.' }),\n  fecha_retiro: z.string().optional(),\n});\n\ntype EditStudentFormProps = {\n  student: Student;\n  onStudentUpdated: (student: Student) => void;\n  sexos: { id: string; nombre: string }[];\n  courses: { id: string; nombre: string }[];\n};\n\nexport function EditStudentForm({ student, onStudentUpdated, sexos, courses }: EditStudentFormProps) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      rut: student.rut,\n      nombres: student.nombres,\n      apellidos: student.apellidos,\n      sexo_id: student.sexo?.id || '',\n      email: student.email,\n      fecha_nacimiento: student.fecha_nacimiento ? student.fecha_nacimiento.substring(0, 10) : '',\n      telefono: student.telefono || '',\n      direccion: student.direccion || '',\n      curso_id: student.curso?.id || '',\n      enrollmentDate: student.enrollmentDate ? student.enrollmentDate.substring(0, 10) : '',\n      fecha_retiro: student.fecha_retiro ? student.fecha_retiro.substring(0, 10) : '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsSubmitting(true);\n    try {\n      const updatedStudent = await updateStudent(student.userId, {\n        ...values,\n        fecha_nacimiento: new Date(values.fecha_nacimiento).toISOString(),\n        fecha_matricula: new Date(values.enrollmentDate).toISOString(),\n        fecha_retiro: values.fecha_retiro ? new Date(values.fecha_retiro).toISOString() : null,\n      });\n\n      onStudentUpdated(updatedStudent);\n      toast({\n        title: 'Estudiante Actualizado',\n        description: `${values.nombres} ${values.apellidos} ha sido actualizado.`,\n      });\n    } catch (error: any) {\n      toast({\n        title: 'Error al actualizar estudiante',\n        description: error.message || 'Ocurrió un error desconocido.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"grid grid-cols-2 gap-x-8 gap-y-4 pt-4\">\n        <FormField\n          control={form.control}\n          name=\"rut\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">RUT</FormLabel>\n              <FormControl>\n                <Input {...field} disabled />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Email</FormLabel>\n              <FormControl>\n                <Input {...field} disabled />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"nombres\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Nombres*</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Juan\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"apellidos\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Apellidos*</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Pérez\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"sexo_id\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Sexo*</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccione el sexo\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {sexos.map((sexo) => (\n                    <SelectItem key={sexo.id} value={sexo.id}>\n                      {sexo.nombre}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"curso_id\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Curso*</FormLabel>\n              <Select onValueChange={field.onChange} value={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Seleccione un curso\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {courses.map((course) => (\n                    <SelectItem key={course.id} value={course.id}>\n                      {course.nombre}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"fecha_nacimiento\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Fecha de Nacimiento*</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"date\"\n                  {...field}\n                  value={field.value ? field.value.substring(0, 10) : ''}\n                />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"enrollmentDate\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Fecha de Matrícula*</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"date\"\n                  {...field}\n                  value={field.value ? field.value.substring(0, 10) : ''}\n                />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"telefono\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Teléfono</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: +56912345678\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"direccion\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"text-xs sm:text-sm\">Dirección</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Ej: Calle Falsa 123\" {...field} />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"fecha_retiro\"\n          render={({ field }) => (\n            <FormItem className=\"col-span-2\">\n              <FormLabel className=\"text-xs sm:text-sm\">Fecha de Retiro</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"date\"\n                  {...field}\n                  value={field.value ? field.value.substring(0, 10) : ''}\n                />\n              </FormControl>\n              <FormMessage className=\"text-xs sm:text-sm\" />\n            </FormItem>\n          )}\n        />\n        <div className=\"col-span-2 flex justify-end pt-2\">\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            Actualizar Estudiante\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1363, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,mNAAgB,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,mNAAgB,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,IAAA,yHAAE,EAAC,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,mNAAgB,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1448, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IA+MsB,cAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1460, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAqFsB,WAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1472, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(page: number = 1, pageSize: number = 10): Promise<{ data: Staff[], totalCount: number }> {\n  const start = (page - 1) * pageSize;\n  const end = start + pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' })\n    .order('rut', { ascending: true }) // Order by RUT for consistent pagination\n    .range(start, end);\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { data: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getStaffCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('usuarios')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching staff count:', error);\n    throw new Error('Could not fetch staff count.');\n  }\n  return count || 0;\n}\n\nexport async function getStudentsCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching student count:', error);\n    throw new Error('Could not fetch student count.');\n  }\n  return count || 0;\n}\n\nexport async function getRecentEnrollments(limit: number = 3): Promise<any[]> {\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, curso:cursos(id, nivel, letra), usuario:usuarios(nombres, apellidos)')\n    .order('fecha_matricula', { ascending: false })\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent enrollments:', error);\n    throw new Error('Could not fetch recent enrollments.');\n  }\n\n  return data.map(s => ({\n    name: `${s.usuario.nombres} ${s.usuario.apellidos}`,\n    grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null,\n    enrollmentDate: s.fecha_matricula,\n  }));\n}\n\nexport async function getRecentStaffActivity(limit: number = 3): Promise<any[]> {\n  // This is a placeholder. Real activity would come from an audit log or similar.\n  // For now, we'll just return some recent staff members.\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('nombres, apellidos')\n    .limit(limit);\n\n  if (error) {\n    console.error('Error fetching recent staff activity:', error);\n    throw new Error('Could not fetch recent staff activity.');\n  }\n\n  return data.map(s => ({\n    name: `${s.nombres} ${s.apellidos}`,\n    action: 'realizó alguna acción.', // Placeholder action\n  }));\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudents(page: number = 1, pageSize: number = 10): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  const { data, error, count } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' })\n    .order('nro_registro', { ascending: true })\n    .range(rangeFrom, rangeTo);\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}º Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}º Medio ${curso.letra}` }));\n}\n\nexport async function getCoursesCount(): Promise<number> {\n  const { count, error } = await supabase\n    .from('cursos')\n    .select('id', { count: 'exact', head: true });\n\n  if (error) {\n    console.error('Error fetching course count:', error);\n    throw new Error('Could not fetch course count.');\n  }\n  return count || 0;\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n\n  // Check if the user is already a student\n  const { data: existingStudent, error: checkError } = await supabase\n    .from('estudiantes_detalles')\n    .select('id')\n    .eq('id', studentData.usuario)\n    .maybeSingle();\n\n  if (checkError) {\n    console.error('Error checking for existing student:', checkError);\n    throw new Error('Error al verificar la matrícula del estudiante.');\n  }\n\n  if (existingStudent) {\n    throw new Error('El usuario ya se encuentra matriculado como estudiante.');\n  }\n\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}º Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;IAwOsB,aAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1484, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/ui/pagination.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"Pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Ir a la página anterior\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Anterior</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Ir a la página siguiente\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Siguiente</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AANA;;;;;;AAQA,MAAM,aAAa,CAAC,EAAE,SAAS,EAAE,GAAG,OAAoC,iBACtE,8OAAC;QACC,MAAK;QACL,cAAW;QACX,WAAW,IAAA,yHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,oCAAoC;QACjD,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG;AAEhC,MAAM,+BAAiB,mNAAgB,CAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAG,KAAK;QAAK,WAAW,IAAA,yHAAE,EAAC,IAAI;QAAa,GAAG,KAAK;;;;;;AAEvD,eAAe,WAAW,GAAG;AAO7B,MAAM,iBAAiB,CAAC,EACtB,SAAS,EACT,QAAQ,EACR,OAAO,MAAM,EACb,GAAG,OACiB,iBACpB,8OAAC;QACC,gBAAc,WAAW,SAAS;QAClC,WAAW,IAAA,yHAAE,EACX,IAAA,oJAAc,EAAC;YACb,SAAS,WAAW,YAAY;YAChC;QACF,IACA;QAED,GAAG,KAAK;;;;;;AAGb,eAAe,WAAW,GAAG;AAE7B,MAAM,qBAAqB,CAAC,EAC1B,SAAS,EACT,GAAG,OACyC,iBAC5C,8OAAC;QACC,cAAW;QACX,MAAK;QACL,WAAW,IAAA,yHAAE,EAAC,gBAAgB;QAC7B,GAAG,KAAK;;0BAET,8OAAC,mOAAW;gBAAC,WAAU;;;;;;0BACvB,8OAAC;0BAAK;;;;;;;;;;;;AAGV,mBAAmB,WAAW,GAAG;AAEjC,MAAM,iBAAiB,CAAC,EACtB,SAAS,EACT,GAAG,OACyC,iBAC5C,8OAAC;QACC,cAAW;QACX,MAAK;QACL,WAAW,IAAA,yHAAE,EAAC,gBAAgB;QAC7B,GAAG,KAAK;;0BAET,8OAAC;0BAAK;;;;;;0BACN,8OAAC,sOAAY;gBAAC,WAAU;;;;;;;;;;;;AAG5B,eAAe,WAAW,GAAG;AAE7B,MAAM,qBAAqB,CAAC,EAC1B,SAAS,EACT,GAAG,OAC0B,iBAC7B,8OAAC;QACC,aAAW;QACX,WAAW,IAAA,yHAAE,EAAC,4CAA4C;QACzD,GAAG,KAAK;;0BAET,8OAAC,kOAAc;gBAAC,WAAU;;;;;;0BAC1B,8OAAC;gBAAK,WAAU;0BAAU;;;;;;;;;;;;AAG9B,mBAAmB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1643, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/StudentList.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useMemo, useEffect } from 'react';\nimport type { Student } from '@/lib/types';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { PlusCircle, Search } from 'lucide-react';\nimport dynamic from 'next/dynamic';\nconst EnrollStudentForm = dynamic(() => import('./EnrollStudentForm').then(mod => mod.EnrollStudentForm), { ssr: false });\nimport { EditStudentForm } from './EditStudentForm';\nimport { Card, CardContent } from './ui/card';\nimport { getStudents, getSexos, getCourses } from '@/lib/actions';\nimport { useToast } from '@/hooks/use-toast';\nimport { Skeleton } from './ui/skeleton';\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from './ui/pagination';\n\nexport function StudentList() {\n  const [students, setStudents] = useState<Student[]>([]);\n  const [sexos, setSexos] = useState<{ id: string; nombre: string }[]>([]);\n  const [courses, setCourses] = useState<{ id: string; nombre: string }[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(10); // You can make this configurable\n  const [totalStudents, setTotalStudents] = useState(0);\n  const { toast } = useToast();\n\n  const totalPages = useMemo(() => Math.ceil(totalStudents / pageSize), [totalStudents, pageSize]);\n\n  useEffect(() => {\n    const fetchStudents = async () => {\n      setIsLoading(true);\n      try {\n        const { students: studentsData, totalCount } = await getStudents(currentPage, pageSize);\n        const sortedStudents = (studentsData as Student[]).sort((a, b) => parseInt(a.id, 10) - parseInt(b.id, 10));\n        setStudents(sortedStudents);\n        setTotalStudents(totalCount);\n      } catch (error) {\n        toast({\n          title: 'Error al cargar estudiantes',\n          description: 'No se pudieron cargar los datos de los estudiantes.',\n          variant: 'destructive',\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    const fetchSexosAndCourses = async () => {\n      try {\n        const [sexosData, coursesData] = await Promise.all([\n          getSexos(),\n          getCourses(),\n        ]);\n        setSexos(sexosData as { id: string; nombre: string }[]);\n        setCourses(coursesData as { id: string; nombre: string }[]);\n      } catch (error) {\n        toast({\n          title: 'Error al cargar datos complementarios',\n          description: 'No se pudieron cargar los datos de sexos y cursos.',\n          variant: 'destructive',\n        });\n      }\n    };\n\n    fetchStudents();\n    fetchSexosAndCourses();\n  }, [currentPage, pageSize, toast]);\n\n  const filteredStudents = useMemo(() =>\n    students.filter(student =>\n      `${student.nombres} ${student.apellidos}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.grade.toLowerCase().includes(searchTerm.toLowerCase())\n    ), [students, searchTerm]);\n\n  const paginatedStudents = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return filteredStudents.slice(startIndex, startIndex + pageSize);\n  }, [filteredStudents, currentPage, pageSize]);\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const TableSkeleton = () => (\n    <Table>\n      <TableHeader>\n        <TableRow key=\"skeleton-header\">\n          {[...Array(10)].map((_, i) => <TableHead key={i}><Skeleton className=\"h-5 w-full\" /></TableHead>)}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {[...Array(5)].map((_, i) => (\n          <TableRow key={i}>\n            <TableCell colSpan={10}>\n              <Skeleton className=\"h-8 w-full\" />\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = Math.min(startIndex + pageSize, filteredStudents.length);\n\n  return (\n    <>\n      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between gap-4 mb-4\">\n              <div className=\"relative w-full max-w-sm\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Buscar por nombre, ID, grado...\"\n                  value={searchTerm}\n                  onChange={(e) => {\n                    setSearchTerm(e.target.value);\n                    setCurrentPage(1); // Reset to first page on search\n                  }}\n                  className=\"pl-10\"\n                />\n              </div>\n              <DialogTrigger asChild>\n                <Button>\n                  <PlusCircle className=\"mr-2 h-4 w-4\" />\n                  Matricular Estudiante\n                </Button>\n              </DialogTrigger>\n            </div>\n            <div className=\"rounded-lg border w-full\">\n              {isLoading ? <TableSkeleton /> : (\n                <Table className=\"w-full min-w-0 text-sm\">\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"whitespace-nowrap\">Nº Registro</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">RUT</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Nombre</TableHead>\n                    <TableHead className=\"hidden md:table-cell whitespace-nowrap\">Sexo</TableHead>\n                    <TableHead className=\"hidden lg:table-cell whitespace-nowrap\">Fec. Nacimiento</TableHead>\n                    <TableHead className=\"whitespace-nowrap\">Curso</TableHead>\n                    <TableHead className=\"hidden lg:table-cell whitespace-nowrap\">Fec. Matrícula</TableHead>\n                    <TableHead className=\"hidden lg:table-cell whitespace-nowrap\">Fec. Retiro</TableHead>\n                    <TableHead className=\"text-right whitespace-nowrap\">Acciones</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedStudents.length > 0 ? (\n                    paginatedStudents.map((student) => (\n                      <TableRow key={student.id}>\n                        <TableCell className=\"font-medium whitespace-nowrap\">\n                          {student.id}\n                        </TableCell>\n                        <TableCell className=\"whitespace-nowrap\">{student.rut}</TableCell>\n                        <TableCell className=\"whitespace-nowrap\">\n                          <div className=\"flex items-center gap-2 whitespace-nowrap\">\n                            {`${student.nombres} ${student.apellidos}`}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"hidden md:table-cell whitespace-nowrap\">{student.sexo?.nombre}</TableCell>\n                        <TableCell className=\"hidden lg:table-cell whitespace-nowrap\">{new Date(student.fecha_nacimiento).toLocaleDateString('es-ES', { timeZone: 'UTC' })}</TableCell>\n                        <TableCell className=\"whitespace-nowrap\">{student.grade}</TableCell>\n                        <TableCell className=\"hidden lg:table-cell whitespace-nowrap\">{new Date(student.enrollmentDate).toLocaleDateString('es-ES', { timeZone: 'UTC' })}</TableCell>\n                        <TableCell className=\"hidden lg:table-cell whitespace-nowrap\">{student.fecha_retiro ? new Date(student.fecha_retiro).toLocaleDateString('es-ES', { timeZone: 'UTC' }) : '-'}</TableCell>\n                        <TableCell className=\"text-right whitespace-nowrap\">\n                          <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEditClick(student)}>Editar</Button>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  ) : (\n                    <TableRow>\n                      <TableCell colSpan={10} className=\"h-24 text-center whitespace-nowrap\">\n                        No se encontraron estudiantes.\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n              )}\n            </div>\n            <div className=\"flex items-center justify-between pt-4\">\n              <div className=\"text-sm text-muted-foreground whitespace-nowrap\">\n                Mostrando {endIndex > 0 ? startIndex + 1 : 0} a {endIndex} de {totalStudents} estudiantes\n              </div>\n              {totalPages > 1 && (\n                <Pagination className=\"ml-auto\">\n                  <PaginationContent>\n                    <PaginationItem>\n                      <PaginationPrevious href=\"#\" onClick={(e) => { e.preventDefault(); handlePageChange(Math.max(1, currentPage - 1)); }} disabled={currentPage === 1} />\n                    </PaginationItem>\n                    <PaginationItem>\n                      <span className=\"text-sm font-medium text-muted-foreground\">\n                        Página {currentPage} de {totalPages}\n                      </span>\n                    </PaginationItem>\n                    <PaginationItem>\n                      <PaginationNext href=\"#\" onClick={(e) => { e.preventDefault(); handlePageChange(Math.min(totalPages, currentPage + 1)); }} disabled={currentPage === totalPages} />\n                    </PaginationItem>\n                  </PaginationContent>\n                </Pagination>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n        <DialogContent className=\"sm:max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"font-headline\">Matricular Nuevo Estudiante</DialogTitle>\n            <DialogDescription>\n              Complete los detalles a continuación para registrar a un nuevo estudiante. Se generará una foto de perfil por IA si no se carga una.\n            </DialogDescription>\n          </DialogHeader>\n          {isFormOpen && (\n            <EnrollStudentForm onStudentAdded={handleAddStudent} nextId={maxId + 1} sexos={sexos} courses={courses} />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {selectedStudent && (\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"sm:max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"font-headline\">Editar Estudiante</DialogTitle>\n              <DialogDescription>\n                Actualice los datos del estudiante.\n              </DialogDescription>\n            </DialogHeader>\n            <EditStudentForm\n              student={selectedStudent}\n              onStudentUpdated={handleStudentUpdated}\n              sexos={sexos}\n              courses={courses}\n            />\n          </DialogContent>\n        </Dialog>\n      )}\n    </>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}