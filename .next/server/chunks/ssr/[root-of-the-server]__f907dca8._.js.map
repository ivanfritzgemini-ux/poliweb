{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,uMAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function getStaff(\n  page: number = 1, \n  pageSize: number = 10,\n  status?: string\n): Promise<{ staff: Staff[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  let query = supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, fecha_nacimiento, sexo(id, nombre), role:roles(id, nombre_rol)', { count: 'exact' });\n\n  if (status) {\n    query = query.eq('status', status);\n  }\n  \n  query = query.order('rut', { ascending: true });\n\n  if (pageSize !== 0) {\n    query = query.range(rangeFrom, rangeTo);\n  }\n\n  const { data, error, count } = await query;\n\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n\n  return { staff: data as Staff[], totalCount: count || 0 };\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function getRoleIdByName(roleName: string): Promise<string | null> {\n  const { data, error } = await supabase\n    .from('roles')\n    .select('id')\n    .eq('nombre_rol', roleName)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error(`Error fetching role ID for ${roleName}:`, error);\n    throw new Error(`Could not fetch role ID for ${roleName}.`);\n  }\n\n  return data ? String(data.id) : null;\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  }).select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol)').single();\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any, userId?: string) {\n  const { email, password, ...profileUpdates } = updates;\n\n  // 1. Update Supabase Auth if email or password are provided\n  if (email || password) {\n    const authUpdates: any = {};\n    if (email) authUpdates.email = email;\n    if (password) authUpdates.password = password;\n\n    if (!userId) {\n      throw new Error('User ID is required to update email or password.');\n    }\n\n    const { data: authData, error: authError } = await supabase.auth.admin.updateUserById(\n      userId,\n      authUpdates\n    );\n\n    if (authError) {\n      console.error('Error updating auth user:', authError);\n      throw new Error(authError.message);\n    }\n\n    // If email was changed, update it in the profile table as well\n    if (email) {\n      profileUpdates.email = email;\n    }\n  }\n\n  // 2. Update the public.usuarios table\n  const { data, error } = await supabase.from('usuarios').update(profileUpdates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function getStaffByRut(rut: string): Promise<Staff | null> {\n  const { data, error } = await supabase\n    .from('usuarios')\n    .select('id, rut, nombres, apellidos, email, status, sexo(id, nombre), role:roles(id, nombre_rol), telefono, direccion, fecha_nacimiento')\n    .eq('rut', rut)\n    .single();\n\n  if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found, which is not an error here.\n    console.error('Error fetching staff by RUT:', error);\n    throw new Error('No se pudo buscar el personal por RUT.');\n  }\n\n  return data as Staff | null;\n}\n\nexport async function getStudentByRut(rut: string): Promise<any | null> {\n  const { data: user, error: userError } = await supabase\n    .from('usuarios')\n    .select('id')\n    .eq('rut', rut)\n    .single();\n\n  if (userError && userError.code !== 'PGRST116') {\n    console.error('Error fetching user by RUT:', userError);\n    throw new Error('No se pudo buscar el usuario por RUT.');\n  }\n\n  if (!user) {\n    return null; // User does not exist\n  }\n\n  const { data: student, error: studentError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro')\n    .eq('id', user.id)\n    .single();\n\n  if (studentError && studentError.code !== 'PGRST116') {\n    console.error('Error fetching student details:', studentError);\n    throw new Error('No se pudo buscar los detalles del estudiante.');\n  }\n\n  return student;\n}\n\nexport async function getStudents(\n  page: number = 1, \n  pageSize: number = 10, \n  orderBy: { column: string, ascending: boolean } = { column: 'nro_registro', ascending: true }\n): Promise<{ students: any[], totalCount: number }> {\n  const rangeFrom = (page - 1) * pageSize;\n  const rangeTo = page * pageSize - 1;\n\n  let query = supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)', { count: 'exact' });\n\n  if (orderBy) {\n    query = query.order(orderBy.column, { ascending: orderBy.ascending });\n  }\n\n  if (pageSize !== 0) {\n    query = query.range(rangeFrom, rangeTo);\n  }\n\n  const { data, error, count } = await query;\n\n  if (error) {\n    console.error('Error fetching students:', error);\n    throw new Error('Could not fetch student data.');\n  }\n\n  const students = data.map(s => {\n    const student = { ...s.usuario, ...s, id: s.nro_registro, userId: s.usuario.id, grade: s.curso?.nivel ? `${s.curso.nivel}ยบ Medio ${s.curso.letra}` : null, enrollmentDate: s.fecha_matricula };\n    student.sexo = s.usuario.sexo;\n    student.curso = s.curso;\n    return student;\n  });\n\n  return { students, totalCount: count || 0 };\n}\n\nexport async function getCourses(): Promise<{ id: string; nombre: string }[]> {\n  const { data, error } = await supabase.from('cursos').select('id, nivel, letra');\n\n  if (error) {\n    console.error('Error fetching courses:', error);\n    throw new Error('Could not fetch courses data.');\n  }\n\n  return data.map(curso => ({ id: String(curso.id), nombre: `${curso.nivel}ยบ Medio ${curso.letra}` }));\n}\n\nexport async function createUser(userData: any, rol_id: string | null = null) {\n  const { email, password, ...rest } = userData;\n\n  // Generate a random password if not provided\n  const userPassword = password || Math.random().toString(36).substring(2, 15);\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password: userPassword,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    fecha_nacimiento: rest.fecha_nacimiento,\n    telefono: rest.phone || null,\n    direccion: rest.address || null,\n    rol_id: rol_id,\n  }).select('id').single();\n\n  if (error) {\n    console.error('Error inserting user data:', error);\n    throw new Error(error.message);\n  }\n\n  return data.id; // Return the new user's ID\n}\n\nexport async function addStudent(studentData: any) {\n  // This function now only inserts into 'estudiantes_detalles'\n  // It assumes the user (identified by RUT) already exists in the 'usuarios' table.\n  const { data, error } = await supabase\n    .from('estudiantes_detalles')\n    .insert([\n      {\n        id: studentData.usuario,\n        nro_registro: studentData.id,\n        curso_id: studentData.curso_id,\n        fecha_matricula: studentData.enrollmentDate,\n      },\n    ])\n    .select()\n    .single();\n\n  if (error) {\n    console.error('Error inserting student data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStudent(userId: string, updates: any) {\n  const {\n    // Fields for 'usuarios' table\n    nombres,\n    apellidos,\n    sexo_id,\n    fecha_nacimiento,\n    telefono,\n    direccion,\n    // Fields for 'estudiantes_detalles' table\n    curso_id,\n    fecha_matricula,\n    fecha_retiro,\n  } = updates;\n\n  // 1. Update the 'usuarios' table\n  const { error: userError } = await supabase\n    .from('usuarios')\n    .update({\n      nombres,\n      apellidos,\n      sexo_id,\n      fecha_nacimiento,\n      telefono,\n      direccion,\n    })\n    .eq('id', userId);\n\n  if (userError) {\n    console.error('Error updating student user data:', userError);\n    throw new Error('Could not update student user data.');\n  }\n\n  // 2. Update the 'estudiantes_detalles' table\n  const { error: studentDetailsError } = await supabase\n    .from('estudiantes_detalles')\n    .update({\n      curso_id,\n      fecha_matricula,\n      fecha_retiro,\n    })\n    .eq('id', userId);\n\n  if (studentDetailsError) {\n    console.error('Error updating student details:', studentDetailsError);\n    throw new Error('Could not update student details.');\n  }\n\n  // 3. Fetch and return the updated student data\n  const { data: updatedStudent, error: fetchError } = await supabase\n    .from('estudiantes_detalles')\n    .select('nro_registro, fecha_matricula, fecha_retiro, curso:cursos(id, nivel, letra), usuario:usuarios(id, rut, nombres, apellidos, fecha_nacimiento, sexo:sexo(id, nombre), email, telefono, direccion)')\n    .eq('id', userId)\n    .single();\n\n  if (fetchError) {\n    console.error('Error fetching updated student data:', fetchError);\n    throw new Error('Could not fetch updated student data.');\n  }\n  \n  const mappedStudent = { \n    ...updatedStudent.usuario, \n    ...updatedStudent, \n    id: updatedStudent.nro_registro, \n    userId: updatedStudent.usuario.id,\n    grade: updatedStudent.curso?.nivel ? `${updatedStudent.curso.nivel}ยบ Medio ${updatedStudent.curso.letra}` : null, \n    enrollmentDate: updatedStudent.fecha_matricula \n  };\n\n  mappedStudent.sexo = updatedStudent.usuario.sexo;\n  mappedStudent.curso = updatedStudent.curso;\n\n\n  return mappedStudent;\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AAGO,eAAe,SACpB,OAAe,CAAC,EAChB,WAAmB,EAAE,EACrB,MAAe;IAEf,MAAM,YAAY,CAAC,OAAO,CAAC,IAAI;IAC/B,MAAM,UAAU,OAAO,WAAW;IAElC,IAAI,QAAQ,kIAAQ,CACjB,IAAI,CAAC,YACL,MAAM,CAAC,8GAA8G;QAAE,OAAO;IAAQ;IAEzI,IAAI,QAAQ;QACV,QAAQ,MAAM,EAAE,CAAC,UAAU;IAC7B;IAEA,QAAQ,MAAM,KAAK,CAAC,OAAO;QAAE,WAAW;IAAK;IAE7C,IAAI,aAAa,GAAG;QAClB,QAAQ,MAAM,KAAK,CAAC,WAAW;IACjC;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM;IAErC,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;QAAE,OAAO;QAAiB,YAAY,SAAS;IAAE;AAC1D;AAEO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC;IAC3D,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,KAAK,GAAG,CAAC,CAAA,OAAQ,CAAC;YAAE,GAAG,IAAI;YAAE,IAAI,OAAO,KAAK,EAAE;QAAE,CAAC;AAC3D;AAEO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,SAAS,MAAM,CAAC;IAC5D,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,KAAK,GAAG,CAAC,CAAA,OAAQ,CAAC;YAAE,GAAG,IAAI;YAAE,IAAI,OAAO,KAAK,EAAE;QAAE,CAAC;AAC3D;AAEO,eAAe,gBAAgB,QAAgB;IACpD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CACnC,IAAI,CAAC,SACL,MAAM,CAAC,MACP,EAAE,CAAC,cAAc,UACjB,MAAM;IAET,IAAI,SAAS,MAAM,IAAI,KAAK,YAAY;QACtC,QAAQ,KAAK,CAAC,CAAC,2BAA2B,EAAE,SAAS,CAAC,CAAC,EAAE;QACzD,MAAM,IAAI,MAAM,CAAC,4BAA4B,EAAE,SAAS,CAAC,CAAC;IAC5D;IAEA,OAAO,OAAO,OAAO,KAAK,EAAE,IAAI;AAClC;AAEO,eAAe,SAAS,QAAa;IAC1C,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,GAAG;IAErC,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;QACtE;QACA;IACF;IAEA,IAAI,WAAW;QACb,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM,IAAI,MAAM,UAAU,OAAO;IACnC;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC;QAC7D,IAAI,SAAS,IAAI,EAAE;QACnB,KAAK,KAAK,GAAG;QACb,SAAS,KAAK,OAAO;QACrB,WAAW,KAAK,SAAS;QACzB,SAAS,KAAK,OAAO;QACrB,OAAO;QACP,QAAQ,KAAK,MAAM;QACnB,kBAAkB,KAAK,gBAAgB;QACvC,UAAU,KAAK,QAAQ,IAAI;QAC3B,WAAW,KAAK,SAAS,IAAI;IAC/B,GAAG,MAAM,CAAC,4FAA4F,MAAM;IAE5G,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM,MAAM,OAAO;IAC/B;IAEA,OAAO;AACT;AAEO,eAAe,YAAY,GAAW,EAAE,OAAY,EAAE,MAAe;IAC1E,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,gBAAgB,GAAG;IAE/C,4DAA4D;IAC5D,IAAI,SAAS,UAAU;QACrB,MAAM,cAAmB,CAAC;QAC1B,IAAI,OAAO,YAAY,KAAK,GAAG;QAC/B,IAAI,UAAU,YAAY,QAAQ,GAAG;QAErC,IAAI,CAAC,QAAQ;YACX,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CACnF,QACA;QAGF,IAAI,WAAW;YACb,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,MAAM,IAAI,MAAM,UAAU,OAAO;QACnC;QAEA,+DAA+D;QAC/D,IAAI,OAAO;YACT,eAAe,KAAK,GAAG;QACzB;IACF;IAEA,sCAAsC;IACtC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,gBAAgB,EAAE,CAAC,OAAO;IAEzF,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM,IAAI,MAAM,MAAM,OAAO;IAC/B;IAEA,OAAO;AACT;AAEO,eAAe,cAAc,GAAW;IAC7C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CACnC,IAAI,CAAC,YACL,MAAM,CAAC,mIACP,EAAE,CAAC,OAAO,KACV,MAAM;IAET,IAAI,SAAS,MAAM,IAAI,KAAK,YAAY;QACtC,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;AAEO,eAAe,gBAAgB,GAAW;IAC/C,MAAM,EAAE,MAAM,IAAI,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,kIAAQ,CACpD,IAAI,CAAC,YACL,MAAM,CAAC,MACP,EAAE,CAAC,OAAO,KACV,MAAM;IAET,IAAI,aAAa,UAAU,IAAI,KAAK,YAAY;QAC9C,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM;IAClB;IAEA,IAAI,CAAC,MAAM;QACT,OAAO,MAAM,sBAAsB;IACrC;IAEA,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,kIAAQ,CAC1D,IAAI,CAAC,wBACL,MAAM,CAAC,gBACP,EAAE,CAAC,MAAM,KAAK,EAAE,EAChB,MAAM;IAET,IAAI,gBAAgB,aAAa,IAAI,KAAK,YAAY;QACpD,QAAQ,KAAK,CAAC,mCAAmC;QACjD,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;AAEO,eAAe,YACpB,OAAe,CAAC,EAChB,WAAmB,EAAE,EACrB,UAAkD;IAAE,QAAQ;IAAgB,WAAW;AAAK,CAAC;IAE7F,MAAM,YAAY,CAAC,OAAO,CAAC,IAAI;IAC/B,MAAM,UAAU,OAAO,WAAW;IAElC,IAAI,QAAQ,kIAAQ,CACjB,IAAI,CAAC,wBACL,MAAM,CAAC,mMAAmM;QAAE,OAAO;IAAQ;IAE9N,IAAI,SAAS;QACX,QAAQ,MAAM,KAAK,CAAC,QAAQ,MAAM,EAAE;YAAE,WAAW,QAAQ,SAAS;QAAC;IACrE;IAEA,IAAI,aAAa,GAAG;QAClB,QAAQ,MAAM,KAAK,CAAC,WAAW;IACjC;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM;IAErC,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,WAAW,KAAK,GAAG,CAAC,CAAA;QACxB,MAAM,UAAU;YAAE,GAAG,EAAE,OAAO;YAAE,GAAG,CAAC;YAAE,IAAI,EAAE,YAAY;YAAE,QAAQ,EAAE,OAAO,CAAC,EAAE;YAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG;YAAM,gBAAgB,EAAE,eAAe;QAAC;QAC7L,QAAQ,IAAI,GAAG,EAAE,OAAO,CAAC,IAAI;QAC7B,QAAQ,KAAK,GAAG,EAAE,KAAK;QACvB,OAAO;IACT;IAEA,OAAO;QAAE;QAAU,YAAY,SAAS;IAAE;AAC5C;AAEO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC;IAE7D,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,2BAA2B;QACzC,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,KAAK,GAAG,CAAC,CAAA,QAAS,CAAC;YAAE,IAAI,OAAO,MAAM,EAAE;YAAG,QAAQ,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,MAAM,KAAK,EAAE;QAAC,CAAC;AACpG;AAEO,eAAe,WAAW,QAAa,EAAE,SAAwB,IAAI;IAC1E,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,GAAG;IAErC,6CAA6C;IAC7C,MAAM,eAAe,YAAY,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;IAEzE,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;QACtE;QACA,UAAU;IACZ;IAEA,IAAI,WAAW;QACb,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM,IAAI,MAAM,UAAU,OAAO;IACnC;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC;QAC7D,IAAI,SAAS,IAAI,EAAE;QACnB,KAAK,KAAK,GAAG;QACb,SAAS,KAAK,OAAO;QACrB,WAAW,KAAK,SAAS;QACzB,SAAS,KAAK,OAAO;QACrB,OAAO;QACP,kBAAkB,KAAK,gBAAgB;QACvC,UAAU,KAAK,KAAK,IAAI;QACxB,WAAW,KAAK,OAAO,IAAI;QAC3B,QAAQ;IACV,GAAG,MAAM,CAAC,MAAM,MAAM;IAEtB,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM,IAAI,MAAM,MAAM,OAAO;IAC/B;IAEA,OAAO,KAAK,EAAE,EAAE,2BAA2B;AAC7C;AAEO,eAAe,WAAW,WAAgB;IAC/C,6DAA6D;IAC7D,kFAAkF;IAClF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CACnC,IAAI,CAAC,wBACL,MAAM,CAAC;QACN;YACE,IAAI,YAAY,OAAO;YACvB,cAAc,YAAY,EAAE;YAC5B,UAAU,YAAY,QAAQ;YAC9B,iBAAiB,YAAY,cAAc;QAC7C;KACD,EACA,MAAM,GACN,MAAM;IAET,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,MAAM,IAAI,MAAM,MAAM,OAAO;IAC/B;IAEA,OAAO;AACT;AAEO,eAAe,cAAc,MAAc,EAAE,OAAY;IAC9D,MAAM,EACJ,8BAA8B;IAC9B,OAAO,EACP,SAAS,EACT,OAAO,EACP,gBAAgB,EAChB,QAAQ,EACR,SAAS,EACT,0CAA0C;IAC1C,QAAQ,EACR,eAAe,EACf,YAAY,EACb,GAAG;IAEJ,iCAAiC;IACjC,MAAM,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,kIAAQ,CACxC,IAAI,CAAC,YACL,MAAM,CAAC;QACN;QACA;QACA;QACA;QACA;QACA;IACF,GACC,EAAE,CAAC,MAAM;IAEZ,IAAI,WAAW;QACb,QAAQ,KAAK,CAAC,qCAAqC;QACnD,MAAM,IAAI,MAAM;IAClB;IAEA,6CAA6C;IAC7C,MAAM,EAAE,OAAO,mBAAmB,EAAE,GAAG,MAAM,kIAAQ,CAClD,IAAI,CAAC,wBACL,MAAM,CAAC;QACN;QACA;QACA;IACF,GACC,EAAE,CAAC,MAAM;IAEZ,IAAI,qBAAqB;QACvB,QAAQ,KAAK,CAAC,mCAAmC;QACjD,MAAM,IAAI,MAAM;IAClB;IAEA,+CAA+C;IAC/C,MAAM,EAAE,MAAM,cAAc,EAAE,OAAO,UAAU,EAAE,GAAG,MAAM,kIAAQ,CAC/D,IAAI,CAAC,wBACL,MAAM,CAAC,mMACP,EAAE,CAAC,MAAM,QACT,MAAM;IAET,IAAI,YAAY;QACd,QAAQ,KAAK,CAAC,wCAAwC;QACtD,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,gBAAgB;QACpB,GAAG,eAAe,OAAO;QACzB,GAAG,cAAc;QACjB,IAAI,eAAe,YAAY;QAC/B,QAAQ,eAAe,OAAO,CAAC,EAAE;QACjC,OAAO,eAAe,KAAK,EAAE,QAAQ,GAAG,eAAe,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,eAAe,KAAK,CAAC,KAAK,EAAE,GAAG;QAC5G,gBAAgB,eAAe,eAAe;IAChD;IAEA,cAAc,IAAI,GAAG,eAAe,OAAO,CAAC,IAAI;IAChD,cAAc,KAAK,GAAG,eAAe,KAAK;IAG1C,OAAO;AACT;;;IA/WsB;IAgCA;IASA;IASA;IAeA;IAkCA;IAwCA;IAeA;IA8BA;IAqCA;IAWA;IAqCA;IAwBA;;AArSA,+OAAA;AAgCA,+OAAA;AASA,+OAAA;AASA,+OAAA;AAeA,+OAAA;AAkCA,+OAAA;AAwCA,+OAAA;AAeA,+OAAA;AA8BA,+OAAA;AAqCA,+OAAA;AAWA,+OAAA;AAqCA,+OAAA;AAwBA,+OAAA","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/.next-internal/server/app/staff/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getStaff as '70f12475fe20c3b1d9c185656638a34de0c1ffc307'} from 'ACTIONS_MODULE0'\nexport {updateStaff as '702dd697be5ee85e0f73ba948cb73b237413c84cbd'} from 'ACTIONS_MODULE0'\nexport {getSexos as '00524684d7079f734fd413a225057615b009443731'} from 'ACTIONS_MODULE0'\nexport {getRoles as '00b3365db56babd3b6098379aea9b0546ce5f86af7'} from 'ACTIONS_MODULE0'\nexport {addStaff as '40dc39ed34aa137806b976b4b9580705bf1dc5368e'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/StaffList.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const StaffList = registerClientReference(\n    function() { throw new Error(\"Attempted to call StaffList() from the server but StaffList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/StaffList.tsx <module evaluation>\",\n    \"StaffList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,wQAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/StaffList.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const StaffList = registerClientReference(\n    function() { throw new Error(\"Attempted to call StaffList() from the server but StaffList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/StaffList.tsx\",\n    \"StaffList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,wQAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 470, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/app/staff/page.tsx"],"sourcesContent":["import { StaffList } from '@/components/StaffList';\r\n\r\nexport default function StaffPage() {\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex flex-col space-y-1\">\r\n        <h1 className=\"text-3xl font-headline font-bold text-primary\">Gestiรณn de Personal</h1>\r\n        <p className=\"text-muted-foreground\">Aรฑada nuevos miembros del personal y gestione las cuentas existentes.</p>\r\n      </div>\r\n      <StaffList />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAgD;;;;;;kCAC9D,8OAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;0BAEvC,8OAAC,4IAAS;;;;;;;;;;;AAGhB","debugId":null}}]
}