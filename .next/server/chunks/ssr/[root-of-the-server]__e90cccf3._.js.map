{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,MAAM,KAAK,IAAA,iJAAM,EAAC;IACvB,SAAS;QAAC,IAAA,uLAAQ;KAAG;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/ai/flows/generate-student-avatar.ts"],"sourcesContent":["// This file is machine-generated - edit at your own risk!\n\n'use server';\n\n/**\n * @fileOverview Generates a student avatar based on the student's name.\n *\n * - generateStudentAvatar - A function that generates a student avatar.\n * - GenerateStudentAvatarInput - The input type for the generateStudentAvatar function.\n * - GenerateStudentAvatarOutput - The return type for the generateStudentAvatar function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateStudentAvatarInputSchema = z.object({\n  studentName: z.string().describe('The name of the student.'),\n});\nexport type GenerateStudentAvatarInput = z.infer<typeof GenerateStudentAvatarInputSchema>;\n\nconst GenerateStudentAvatarOutputSchema = z.object({\n  avatarDataUri: z\n    .string()\n    .describe(\n      'The generated avatar for the student, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \\'data:<mimetype>;base64,<encoded_data>\\'.' // keep this comment here to avoid reformatting\n    ),\n});\nexport type GenerateStudentAvatarOutput = z.infer<typeof GenerateStudentAvatarOutputSchema>;\n\nexport async function generateStudentAvatar(input: GenerateStudentAvatarInput): Promise<GenerateStudentAvatarOutput> {\n  return generateStudentAvatarFlow(input);\n}\n\nconst generateStudentAvatarPrompt = ai.definePrompt({\n  name: 'generateStudentAvatarPrompt',\n  input: {schema: GenerateStudentAvatarInputSchema},\n  output: {schema: GenerateStudentAvatarOutputSchema},\n  prompt: `Generate a professional and friendly avatar for a student named {{studentName}}. The avatar should be suitable for use on a school website and should not contain any inappropriate content. The image should be a square with a white background, and the student should be smiling. Optionally add some features related to school, such as a graduation hat or school books. Ensure the generated avatar is in data URI format.`,\n});\n\nconst generateStudentAvatarFlow = ai.defineFlow(\n  {\n    name: 'generateStudentAvatarFlow',\n    inputSchema: GenerateStudentAvatarInputSchema,\n    outputSchema: GenerateStudentAvatarOutputSchema,\n  },\n  async input => {\n    const {media} = await ai.generate({\n      prompt: generateStudentAvatarPrompt(input).prompt,\n      model: 'googleai/imagen-4.0-fast-generate-001',\n    });\n\n    if (!media?.url) {\n      throw new Error('Failed to generate avatar.');\n    }\n    return {avatarDataUri: media.url};\n  }\n);\n"],"names":[],"mappings":"AAAA,0DAA0D;;;;;;AAI1D;;;;;;CAMC,GAED;AACA;AAAA;;;;;AAEA,MAAM,mCAAmC,4IAAC,CAAC,MAAM,CAAC;IAChD,aAAa,4IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,oCAAoC,4IAAC,CAAC,MAAM,CAAC;IACjD,eAAe,4IAAC,CACb,MAAM,GACN,QAAQ,CACP,yKAAyK,+CAA+C;;AAE9N;AAGO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,8BAA8B,yHAAE,CAAC,YAAY,CAAC;IAClD,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC,kaAAka,CAAC;AAC9a;AAEA,MAAM,4BAA4B,yHAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,yHAAE,CAAC,QAAQ,CAAC;QAChC,QAAQ,4BAA4B,OAAO,MAAM;QACjD,OAAO;IACT;IAEA,IAAI,CAAC,OAAO,KAAK;QACf,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;QAAC,eAAe,MAAM,GAAG;IAAA;AAClC;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,uMAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport {\n  generateStudentAvatar,\n  type GenerateStudentAvatarInput,\n} from '@/ai/flows/generate-student-avatar';\nimport { supabase } from './supabase';\nimport type { Staff } from './types';\n\nexport async function generateAvatarAction(input: GenerateStudentAvatarInput) {\n  try {\n    const output = await generateStudentAvatar(input);\n    return { avatarDataUri: output.avatarDataUri };\n  } catch (e: any) {\n    console.error(e);\n    return { error: e.message || 'An unknown error occurred' };\n  }\n}\n\nexport async function getStaff(): Promise<Staff[]> {\n  const { data, error } = await supabase.from('usuarios').select('*, sexo(nombre), role:roles(nombre_rol)');\n  if (error) {\n    console.error('Error fetching staff:', error);\n    throw new Error('Could not fetch staff data.');\n  }\n  return data as Staff[];\n}\n\nexport async function getSexos() {\n  const { data, error } = await supabase.from('sexo').select('id, nombre');\n  if (error) {\n    console.error('Error fetching sexos:', error);\n    throw new Error('Could not fetch sexos data.');\n  }\n  return data.map(sexo => ({ ...sexo, id: String(sexo.id) }));\n}\n\nexport async function getRoles() {\n  const { data, error } = await supabase.from('roles').select('id, nombre_rol');\n  if (error) {\n    console.error('Error fetching roles:', error);\n    throw new Error('Could not fetch roles data.');\n  }\n  return data.map(role => ({ ...role, id: String(role.id) }));\n}\n\nexport async function addStaff(formData: any) {\n  const { email, password, ...rest } = formData;\n\n  const { data: authData, error: authError } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n\n  if (authError) {\n    console.error('Error signing up user:', authError);\n    throw new Error(authError.message);\n  }\n\n  const { data, error } = await supabase.from('usuarios').insert({\n    id: authData.user?.id, // Link to Supabase Auth user ID\n    rut: rest.rut,\n    nombres: rest.nombres,\n    apellidos: rest.apellidos,\n    sexo_id: rest.sexo_id,\n    email: email,\n    rol_id: rest.rol_id,\n    fecha_nacimiento: rest.fecha_de_nacimiento, // Already an ISO string\n    telefono: rest.telefono || null,\n    direccion: rest.direccion || null,\n  });\n\n  if (error) {\n    console.error('Error inserting staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n\nexport async function updateStaff(rut: string, updates: any) {\n  const { data, error } = await supabase.from('usuarios').update(updates).eq('rut', rut);\n\n  if (error) {\n    console.error('Error updating staff data:', error);\n    throw new Error(error.message);\n  }\n\n  return data;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA;AAIA;;;;;AAGO,eAAe,qBAAqB,KAAiC;IAC1E,IAAI;QACF,MAAM,SAAS,MAAM,IAAA,4KAAqB,EAAC;QAC3C,OAAO;YAAE,eAAe,OAAO,aAAa;QAAC;IAC/C,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,OAAO,EAAE,OAAO,IAAI;QAA4B;IAC3D;AACF;AAEO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC;IAC/D,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAEO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,QAAQ,MAAM,CAAC;IAC3D,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,KAAK,GAAG,CAAC,CAAA,OAAQ,CAAC;YAAE,GAAG,IAAI;YAAE,IAAI,OAAO,KAAK,EAAE;QAAE,CAAC;AAC3D;AAEO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,SAAS,MAAM,CAAC;IAC5D,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,KAAK,GAAG,CAAC,CAAA,OAAQ,CAAC;YAAE,GAAG,IAAI;YAAE,IAAI,OAAO,KAAK,EAAE;QAAE,CAAC;AAC3D;AAEO,eAAe,SAAS,QAAa;IAC1C,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,GAAG;IAErC,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;QACtE;QACA;IACF;IAEA,IAAI,WAAW;QACb,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM,IAAI,MAAM,UAAU,OAAO;IACnC;IAEA,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC;QAC7D,IAAI,SAAS,IAAI,EAAE;QACnB,KAAK,KAAK,GAAG;QACb,SAAS,KAAK,OAAO;QACrB,WAAW,KAAK,SAAS;QACzB,SAAS,KAAK,OAAO;QACrB,OAAO;QACP,QAAQ,KAAK,MAAM;QACnB,kBAAkB,KAAK,mBAAmB;QAC1C,UAAU,KAAK,QAAQ,IAAI;QAC3B,WAAW,KAAK,SAAS,IAAI;IAC/B;IAEA,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM,MAAM,OAAO;IAC/B;IAEA,OAAO;AACT;AAEO,eAAe,YAAY,GAAW,EAAE,OAAY;IACzD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kIAAQ,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO;IAElF,IAAI,OAAO;QACT,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM,IAAI,MAAM,MAAM,OAAO;IAC/B;IAEA,OAAO;AACT;;;IAhFsB;IAUA;IASA;IASA;IASA;IAkCA;;AAvEA,+OAAA;AAUA,+OAAA;AASA,+OAAA;AASA,+OAAA;AASA,+OAAA;AAkCA,+OAAA","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/.next-internal/server/app/staff/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getStaff as '002661833dc8c035414bc276704ea4a84e01f98c9e'} from 'ACTIONS_MODULE0'\nexport {getSexos as '0009c048a3bd6aa52d0b25e31c4d73d5b53082487f'} from 'ACTIONS_MODULE0'\nexport {getRoles as '0019014b60c42d5b6e2ab997e98c0c7c9fa2392eb5'} from 'ACTIONS_MODULE0'\nexport {addStaff as '40e13c3d111a3339b1a932c31b2deb94cb1bcd10a2'} from 'ACTIONS_MODULE0'\nexport {updateStaff as '607fa67a4333fe3439bfe95bf6f7b23ba685a2a53f'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/StaffList.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const StaffList = registerClientReference(\n    function() { throw new Error(\"Attempted to call StaffList() from the server but StaffList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/StaffList.tsx <module evaluation>\",\n    \"StaffList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,wQAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,8DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/components/StaffList.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const StaffList = registerClientReference(\n    function() { throw new Error(\"Attempted to call StaffList() from the server but StaffList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/StaffList.tsx\",\n    \"StaffList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,wQAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,0CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 460, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/ivanf/Desktop/poli/src/app/staff/page.tsx"],"sourcesContent":["import { StaffList } from '@/components/StaffList';\n\nexport default function StaffPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col space-y-1\">\n        <h1 className=\"text-3xl font-headline font-bold text-primary\">Gestión de Personal</h1>\n        <p className=\"text-muted-foreground\">Añada nuevos miembros del personal y gestione las cuentas existentes.</p>\n      </div>\n      <StaffList />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAgD;;;;;;kCAC9D,8OAAC;wBAAE,WAAU;kCAAwB;;;;;;;;;;;;0BAEvC,8OAAC,4IAAS;;;;;;;;;;;AAGhB","debugId":null}}]
}